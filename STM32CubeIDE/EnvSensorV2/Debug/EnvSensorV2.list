
EnvSensorV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008708  08008708  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008708  08008708  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008708  08008708  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa4  20000074  0800878c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  0800878c  00021018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046da  00000000  00000000  0004534b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00049a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  0004b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000722d  00000000  00000000  0004c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d49c  00000000  00000000  00053b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc11d  00000000  00000000  00071019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a9c  00000000  00000000  0014d18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800829c 	.word	0x0800829c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800829c 	.word	0x0800829c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb21 	bl	80008ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f834 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f8b6 	bl	80003fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000290:	f000 f876 	bl	8000380 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	2104      	movs	r1, #4
 8000298:	4810      	ldr	r0, [pc, #64]	; (80002dc <main+0x5c>)
 800029a:	f000 fec1 	bl	8001020 <HAL_GPIO_WritePin>
  EnvSensorV2_Init();
 800029e:	f006 fee3 	bl	8007068 <EnvSensorV2_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002a2:	f003 facf 	bl	8003844 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <main+0x60>)
 80002a8:	2102      	movs	r1, #2
 80002aa:	2010      	movs	r0, #16
 80002ac:	f003 fce0 	bl	8003c70 <osMessageQueueNew>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a0c      	ldr	r2, [pc, #48]	; (80002e4 <main+0x64>)
 80002b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <main+0x68>)
 80002b8:	2100      	movs	r1, #0
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <main+0x6c>)
 80002bc:	f003 fb0c 	bl	80038d8 <osThreadNew>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <main+0x70>)
 80002c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002c6:	f003 fae1 	bl	800388c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80002ca:	2104      	movs	r1, #4
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <main+0x5c>)
 80002ce:	f000 febf 	bl	8001050 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80002d2:	20fa      	movs	r0, #250	; 0xfa
 80002d4:	f000 fb32 	bl	800093c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80002d8:	e7f7      	b.n	80002ca <main+0x4a>
 80002da:	bf00      	nop
 80002dc:	48000800 	.word	0x48000800
 80002e0:	080083a8 	.word	0x080083a8
 80002e4:	20000f74 	.word	0x20000f74
 80002e8:	08008384 	.word	0x08008384
 80002ec:	0800052d 	.word	0x0800052d
 80002f0:	20000f24 	.word	0x20000f24

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	2244      	movs	r2, #68	; 0x44
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f007 fb3a 	bl	800797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000316:	f44f 7000 	mov.w	r0, #512	; 0x200
 800031a:	f001 fdf9 	bl	8001f10 <HAL_PWREx_ControlVoltageScaling>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000324:	f000 f91c 	bl	8000560 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000328:	2310      	movs	r3, #16
 800032a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fe3b 	bl	8001fbc <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800034c:	f000 f908 	bl	8000560 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	463b      	mov	r3, r7
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f002 fa47 	bl	80027fc <HAL_RCC_ClockConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000374:	f000 f8f4 	bl	8000560 <Error_Handler>
  }
}
 8000378:	bf00      	nop
 800037a:	3758      	adds	r7, #88	; 0x58
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_I2C1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x74>)
 800038c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000390:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_I2C1_Init+0x74>)
 800039a:	2201      	movs	r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003be:	f000 fe79 	bl	80010b4 <HAL_I2C_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f8ca 	bl	8000560 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003cc:	2100      	movs	r1, #0
 80003ce:	4809      	ldr	r0, [pc, #36]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003d0:	f001 fcf8 	bl	8001dc4 <HAL_I2CEx_ConfigAnalogFilter>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80003da:	f000 f8c1 	bl	8000560 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003de:	2100      	movs	r1, #0
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003e2:	f001 fd3a 	bl	8001e5a <HAL_I2CEx_ConfigDigitalFilter>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80003ec:	f000 f8b8 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000f28 	.word	0x20000f28
 80003f8:	40005400 	.word	0x40005400

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b43      	ldr	r3, [pc, #268]	; (8000520 <MX_GPIO_Init+0x124>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	4a42      	ldr	r2, [pc, #264]	; (8000520 <MX_GPIO_Init+0x124>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041e:	4b40      	ldr	r3, [pc, #256]	; (8000520 <MX_GPIO_Init+0x124>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	f003 0304 	and.w	r3, r3, #4
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <MX_GPIO_Init+0x124>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <MX_GPIO_Init+0x124>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000436:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <MX_GPIO_Init+0x124>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b37      	ldr	r3, [pc, #220]	; (8000520 <MX_GPIO_Init+0x124>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a36      	ldr	r2, [pc, #216]	; (8000520 <MX_GPIO_Init+0x124>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b34      	ldr	r3, [pc, #208]	; (8000520 <MX_GPIO_Init+0x124>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	210f      	movs	r1, #15
 800045e:	4831      	ldr	r0, [pc, #196]	; (8000524 <MX_GPIO_Init+0x128>)
 8000460:	f000 fdde 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BATTER_MEASURE_ENABLE_GPIO_Port, BATTER_MEASURE_ENABLE_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2120      	movs	r1, #32
 8000468:	482f      	ldr	r0, [pc, #188]	; (8000528 <MX_GPIO_Init+0x12c>)
 800046a:	f000 fdd9 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin|LED_3_Pin|LED_2_Pin|LED_1_Pin;
 800046e:	230f      	movs	r3, #15
 8000470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	4619      	mov	r1, r3
 8000484:	4827      	ldr	r0, [pc, #156]	; (8000524 <MX_GPIO_Init+0x128>)
 8000486:	f000 fb5f 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH_1_Pin SWITCH_2_Pin SWITCH_3_Pin SWITCH_4_Pin */
  GPIO_InitStruct.Pin = SWITCH_1_Pin|SWITCH_2_Pin|SWITCH_3_Pin|SWITCH_4_Pin;
 800048a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000490:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	4619      	mov	r1, r3
 80004a0:	4821      	ldr	r0, [pc, #132]	; (8000528 <MX_GPIO_Init+0x12c>)
 80004a2:	f000 fb51 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCD30_READY_Pin */
  GPIO_InitStruct.Pin = SCD30_READY_Pin;
 80004a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SCD30_READY_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fb42 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATTER_MEASURE_ENABLE_Pin */
  GPIO_InitStruct.Pin = BATTER_MEASURE_ENABLE_Pin;
 80004c4:	2320      	movs	r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BATTER_MEASURE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	4813      	ldr	r0, [pc, #76]	; (8000528 <MX_GPIO_Init+0x12c>)
 80004dc:	f000 fb34 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATTERY_MEASURE_INPUT_Pin */
  GPIO_InitStruct.Pin = BATTERY_MEASURE_INPUT_Pin;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BATTERY_MEASURE_INPUT_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <MX_GPIO_Init+0x12c>)
 80004f4:	f000 fb28 	bl	8000b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2105      	movs	r1, #5
 80004fc:	2017      	movs	r0, #23
 80004fe:	f000 faf9 	bl	8000af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000502:	2017      	movs	r0, #23
 8000504:	f000 fb12 	bl	8000b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2105      	movs	r1, #5
 800050c:	2028      	movs	r0, #40	; 0x28
 800050e:	f000 faf1 	bl	8000af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000512:	2028      	movs	r0, #40	; 0x28
 8000514:	f000 fb0a 	bl	8000b2c <HAL_NVIC_EnableIRQ>

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	48000800 	.word	0x48000800
 8000528:	48000400 	.word	0x48000400

0800052c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f003 fa61 	bl	80039fc <osDelay>
 800053a:	e7fb      	b.n	8000534 <StartDefaultTask+0x8>

0800053c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d101      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800054e:	f000 f9d5 	bl	80008fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40001000 	.word	0x40001000

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2101      	movs	r1, #1
 800056c:	4801      	ldr	r0, [pc, #4]	; (8000574 <Error_Handler+0x14>)
 800056e:	f000 fd57 	bl	8001020 <HAL_GPIO_WritePin>
  while (1)
 8000572:	e7fe      	b.n	8000572 <Error_Handler+0x12>
 8000574:	48000800 	.word	0x48000800

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_MspInit+0x4c>)
 8000580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <HAL_MspInit+0x4c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6613      	str	r3, [r2, #96]	; 0x60
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_MspInit+0x4c>)
 800058c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_MspInit+0x4c>)
 8000598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_MspInit+0x4c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	6593      	str	r3, [r2, #88]	; 0x58
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_MspInit+0x4c>)
 80005a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	210f      	movs	r1, #15
 80005b2:	f06f 0001 	mvn.w	r0, #1
 80005b6:	f000 fa9d 	bl	8000af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0a2      	sub	sp, #136	; 0x88
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2264      	movs	r2, #100	; 0x64
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f007 f9c7 	bl	800797c <memset>
  if(hi2c->Instance==I2C1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <HAL_I2C_MspInit+0xac>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d139      	bne.n	800066c <HAL_I2C_MspInit+0xa4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fb1b 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000610:	f7ff ffa6 	bl	8000560 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 8000622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800062c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000630:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000632:	2312      	movs	r3, #18
 8000634:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000640:	2304      	movs	r3, #4
 8000642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 fa7a 	bl	8000b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 8000656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 800065a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065e:	6593      	str	r3, [r2, #88]	; 0x58
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_I2C_MspInit+0xb0>)
 8000662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800066c:	bf00      	nop
 800066e:	3788      	adds	r7, #136	; 0x88
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40005400 	.word	0x40005400
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <HAL_I2C_MspDeInit+0x40>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d111      	bne.n	80006b2 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_I2C_MspDeInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <HAL_I2C_MspDeInit+0x44>)
 8000694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000698:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f000 fbcb 	bl	8000e3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80006a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f000 fbc5 	bl	8000e3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	2036      	movs	r0, #54	; 0x36
 80006da:	f000 fa0b 	bl	8000af4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006de:	2036      	movs	r0, #54	; 0x36
 80006e0:	f000 fa24 	bl	8000b2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <HAL_InitTick+0x9c>)
 80006e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <HAL_InitTick+0x9c>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6593      	str	r3, [r2, #88]	; 0x58
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_InitTick+0x9c>)
 80006f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006fc:	f107 0210 	add.w	r2, r7, #16
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fa08 	bl	8002b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800070c:	f002 f9f0 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8000710:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <HAL_InitTick+0xa0>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	0c9b      	lsrs	r3, r3, #18
 800071c:	3b01      	subs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_InitTick+0xa4>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <HAL_InitTick+0xa8>)
 8000724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_InitTick+0xa4>)
 8000728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_InitTick+0xa4>)
 8000730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_InitTick+0xa4>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_InitTick+0xa4>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <HAL_InitTick+0xa4>)
 8000742:	f002 fda9 	bl	8003298 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <HAL_InitTick+0xa4>)
 800074e:	f002 fe05 	bl	800335c <HAL_TIM_Base_Start_IT>
 8000752:	4603      	mov	r3, r0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	431bde83 	.word	0x431bde83
 8000768:	20000f78 	.word	0x20000f78
 800076c:	40001000 	.word	0x40001000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007a4:	f000 fc6e 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80007b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80007b4:	f000 fc66 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007bc:	f000 fc62 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80007c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007c4:	f000 fc5e 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80007c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007cc:	f000 fc5a 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <TIM6_DAC_IRQHandler+0x10>)
 80007da:	f002 fe1b 	bl	8003414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000f78 	.word	0x20000f78

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f007 f866 	bl	80078e8 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20020000 	.word	0x20020000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000090 	.word	0x20000090
 8000850:	20001018 	.word	0x20001018

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff ffea 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f007 f825 	bl	80078f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008aa:	f7ff fce9 	bl	8000280 <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008bc:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 80008c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008c4:	20001018 	.word	0x20001018

080008c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_IRQHandler>

080008ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f902 	bl	8000ade <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	200f      	movs	r0, #15
 80008dc:	f7ff fef2 	bl	80006c4 <HAL_InitTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e001      	b.n	80008f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ec:	f7ff fe44 	bl	8000578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_IncTick+0x24>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_IncTick+0x24>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	20000fc4 	.word	0x20000fc4

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000fc4 	.word	0x20000fc4

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff ffee 	bl	8000924 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffde 	bl	8000924 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <__NVIC_EnableIRQ+0x38>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff4c 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b06:	f7ff ff61 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	6978      	ldr	r0, [r7, #20]
 8000b12:	f7ff ffb1 	bl	8000a78 <NVIC_EncodePriority>
 8000b16:	4602      	mov	r2, r0
 8000b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff80 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff54 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e154      	b.n	8000e02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8146 	beq.w	8000dfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d005      	beq.n	8000b88 <HAL_GPIO_Init+0x40>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d130      	bne.n	8000bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 0201 	and.w	r2, r3, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d017      	beq.n	8000c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d123      	bne.n	8000c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3208      	adds	r2, #8
 8000c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3208      	adds	r2, #8
 8000c74:	6939      	ldr	r1, [r7, #16]
 8000c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0203 	and.w	r2, r3, #3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80a0 	beq.w	8000dfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbc:	4b58      	ldr	r3, [pc, #352]	; (8000e20 <HAL_GPIO_Init+0x2d8>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc0:	4a57      	ldr	r2, [pc, #348]	; (8000e20 <HAL_GPIO_Init+0x2d8>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc8:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <HAL_GPIO_Init+0x2d8>)
 8000cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd4:	4a53      	ldr	r2, [pc, #332]	; (8000e24 <HAL_GPIO_Init+0x2dc>)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cfe:	d019      	beq.n	8000d34 <HAL_GPIO_Init+0x1ec>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <HAL_GPIO_Init+0x1e8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <HAL_GPIO_Init+0x2e4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1e4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a47      	ldr	r2, [pc, #284]	; (8000e30 <HAL_GPIO_Init+0x2e8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1e0>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a46      	ldr	r2, [pc, #280]	; (8000e34 <HAL_GPIO_Init+0x2ec>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1dc>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e008      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d24:	2307      	movs	r3, #7
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x1ee>
 8000d34:	2300      	movs	r3, #0
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d46:	4937      	ldr	r1, [pc, #220]	; (8000e24 <HAL_GPIO_Init+0x2dc>)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da2:	4a25      	ldr	r2, [pc, #148]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_GPIO_Init+0x2f0>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f47f aea3 	bne.w	8000b58 <HAL_GPIO_Init+0x10>
  }
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	48000c00 	.word	0x48000c00
 8000e34:	48001000 	.word	0x48001000
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000e4a:	e0b7      	b.n	8000fbc <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80aa 	beq.w	8000fb6 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000e62:	4a5d      	ldr	r2, [pc, #372]	; (8000fd8 <HAL_GPIO_DeInit+0x19c>)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8a:	d019      	beq.n	8000ec0 <HAL_GPIO_DeInit+0x84>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a53      	ldr	r2, [pc, #332]	; (8000fdc <HAL_GPIO_DeInit+0x1a0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <HAL_GPIO_DeInit+0x80>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a52      	ldr	r2, [pc, #328]	; (8000fe0 <HAL_GPIO_DeInit+0x1a4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_GPIO_DeInit+0x7c>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a51      	ldr	r2, [pc, #324]	; (8000fe4 <HAL_GPIO_DeInit+0x1a8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_DeInit+0x78>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a50      	ldr	r2, [pc, #320]	; (8000fe8 <HAL_GPIO_DeInit+0x1ac>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_GPIO_DeInit+0x74>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e008      	b.n	8000ec2 <HAL_GPIO_DeInit+0x86>
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	e006      	b.n	8000ec2 <HAL_GPIO_DeInit+0x86>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e004      	b.n	8000ec2 <HAL_GPIO_DeInit+0x86>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e002      	b.n	8000ec2 <HAL_GPIO_DeInit+0x86>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_GPIO_DeInit+0x86>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	f002 0203 	and.w	r2, r2, #3
 8000ec8:	0092      	lsls	r2, r2, #2
 8000eca:	4093      	lsls	r3, r2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d132      	bne.n	8000f38 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	4944      	ldr	r1, [pc, #272]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	4940      	ldr	r1, [pc, #256]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	493d      	ldr	r1, [pc, #244]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8000efc:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4939      	ldr	r1, [pc, #228]	; (8000fec <HAL_GPIO_DeInit+0x1b0>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_GPIO_DeInit+0x19c>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <HAL_GPIO_DeInit+0x19c>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	400a      	ands	r2, r1
 8000f32:	3302      	adds	r3, #2
 8000f34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2103      	movs	r1, #3
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	08d2      	lsrs	r2, r2, #3
 8000f6c:	4019      	ands	r1, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2103      	movs	r1, #3
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f47f af41 	bne.w	8000e4c <HAL_GPIO_DeInit+0x10>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	48000c00 	.word	0x48000c00
 8000fe8:	48001000 	.word	0x48001000
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	4013      	ands	r3, r2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800103c:	e002      	b.n	8001044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	041a      	lsls	r2, r3, #16
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43d9      	mvns	r1, r3
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	400b      	ands	r3, r1
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 f844 	bl	8007130 <HAL_GPIO_EXTI_Callback>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e081      	b.n	80011ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d106      	bne.n	80010e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fa74 	bl	80005c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001104:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001114:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	e006      	b.n	800113c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800113a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d104      	bne.n	800114e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800114c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001160:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001170:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69d9      	ldr	r1, [r3, #28]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2220      	movs	r2, #32
 80011b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e021      	b.n	8001228 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2224      	movs	r2, #36	; 0x24
 80011e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fa3d 	bl	800067c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af02      	add	r7, sp, #8
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	461a      	mov	r2, r3
 800123c:	460b      	mov	r3, r1
 800123e:	817b      	strh	r3, [r7, #10]
 8001240:	4613      	mov	r3, r2
 8001242:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b20      	cmp	r3, #32
 800124e:	f040 80da 	bne.w	8001406 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_I2C_Master_Transmit+0x30>
 800125c:	2302      	movs	r3, #2
 800125e:	e0d3      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1d8>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001268:	f7ff fb5c 	bl	8000924 <HAL_GetTick>
 800126c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2319      	movs	r3, #25
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fb4e 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0be      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2221      	movs	r2, #33	; 0x21
 800128e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2210      	movs	r2, #16
 8001296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	893a      	ldrh	r2, [r7, #8]
 80012aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d90e      	bls.n	80012da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	8979      	ldrh	r1, [r7, #10]
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_I2C_Master_Transmit+0x1e0>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fd44 	bl	8001d60 <I2C_TransferConfig>
 80012d8:	e06c      	b.n	80013b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	8979      	ldrh	r1, [r7, #10]
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_I2C_Master_Transmit+0x1e0>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 fd33 	bl	8001d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012fa:	e05b      	b.n	80013b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	6a39      	ldr	r1, [r7, #32]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 fb4b 	bl	800199c <I2C_WaitOnTXISFlagUntilTimeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e07b      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	3b01      	subs	r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001338:	3b01      	subs	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001344:	b29b      	uxth	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d034      	beq.n	80013b4 <HAL_I2C_Master_Transmit+0x184>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	2b00      	cmp	r3, #0
 8001350:	d130      	bne.n	80013b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 fadd 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e04d      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d90e      	bls.n	8001394 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001380:	b2da      	uxtb	r2, r3
 8001382:	8979      	ldrh	r1, [r7, #10]
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fce7 	bl	8001d60 <I2C_TransferConfig>
 8001392:	e00f      	b.n	80013b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	8979      	ldrh	r1, [r7, #10]
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fcd6 	bl	8001d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d19e      	bne.n	80012fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	6a39      	ldr	r1, [r7, #32]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 fb2a 	bl	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e01a      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2220      	movs	r2, #32
 80013d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_I2C_Master_Transmit+0x1e4>)
 80013e6:	400b      	ands	r3, r1
 80013e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001406:	2302      	movs	r3, #2
  }
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	80002000 	.word	0x80002000
 8001414:	fe00e800 	.word	0xfe00e800

08001418 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	817b      	strh	r3, [r7, #10]
 8001428:	4613      	mov	r3, r2
 800142a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b20      	cmp	r3, #32
 8001436:	f040 80db 	bne.w	80015f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_I2C_Master_Receive+0x30>
 8001444:	2302      	movs	r3, #2
 8001446:	e0d4      	b.n	80015f2 <HAL_I2C_Master_Receive+0x1da>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001450:	f7ff fa68 	bl	8000924 <HAL_GetTick>
 8001454:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2319      	movs	r3, #25
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 fa5a 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0bf      	b.n	80015f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2222      	movs	r2, #34	; 0x22
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2210      	movs	r2, #16
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	893a      	ldrh	r2, [r7, #8]
 8001492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d90e      	bls.n	80014c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	22ff      	movs	r2, #255	; 0xff
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	8979      	ldrh	r1, [r7, #10]
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <HAL_I2C_Master_Receive+0x1e4>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 fc50 	bl	8001d60 <I2C_TransferConfig>
 80014c0:	e06d      	b.n	800159e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	8979      	ldrh	r1, [r7, #10]
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_I2C_Master_Receive+0x1e4>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fc3f 	bl	8001d60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80014e2:	e05c      	b.n	800159e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	6a39      	ldr	r1, [r7, #32]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fad3 	bl	8001a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e07c      	b.n	80015f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d034      	beq.n	800159e <HAL_I2C_Master_Receive+0x186>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d130      	bne.n	800159e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	2200      	movs	r2, #0
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9e8 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e04d      	b.n	80015f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2bff      	cmp	r3, #255	; 0xff
 800155e:	d90e      	bls.n	800157e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	b2da      	uxtb	r2, r3
 800156c:	8979      	ldrh	r1, [r7, #10]
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fbf2 	bl	8001d60 <I2C_TransferConfig>
 800157c:	e00f      	b.n	800159e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	b2da      	uxtb	r2, r3
 800158e:	8979      	ldrh	r1, [r7, #10]
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 fbe1 	bl	8001d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d19d      	bne.n	80014e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6a39      	ldr	r1, [r7, #32]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fa35 	bl	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e01a      	b.n	80015f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2220      	movs	r2, #32
 80015c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_I2C_Master_Receive+0x1e8>)
 80015d0:	400b      	ands	r3, r1
 80015d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80015f0:	2302      	movs	r3, #2
  }
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	80002400 	.word	0x80002400
 8001600:	fe00e800 	.word	0xfe00e800

08001604 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4603      	mov	r3, r0
 8001614:	817b      	strh	r3, [r7, #10]
 8001616:	460b      	mov	r3, r1
 8001618:	813b      	strh	r3, [r7, #8]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b20      	cmp	r3, #32
 8001628:	f040 80f9 	bne.w	800181e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_I2C_Mem_Write+0x34>
 8001632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0ed      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Mem_Write+0x4e>
 800164e:	2302      	movs	r3, #2
 8001650:	e0e6      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800165a:	f7ff f963 	bl	8000924 <HAL_GetTick>
 800165e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2319      	movs	r3, #25
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f955 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d1      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2221      	movs	r2, #33	; 0x21
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800169c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a4:	88f8      	ldrh	r0, [r7, #6]
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f8b9 	bl	800182c <I2C_RequestMemoryWrite>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0a9      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2bff      	cmp	r3, #255	; 0xff
 80016d4:	d90e      	bls.n	80016f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	22ff      	movs	r2, #255	; 0xff
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	8979      	ldrh	r1, [r7, #10]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 fb37 	bl	8001d60 <I2C_TransferConfig>
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fb26 	bl	8001d60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f93f 	bl	800199c <I2C_WaitOnTXISFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e07b      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d034      	beq.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	2b00      	cmp	r3, #0
 8001768:	d130      	bne.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f8d1 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e04d      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d90e      	bls.n	80017ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fadb 	bl	8001d60 <I2C_TransferConfig>
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	2300      	movs	r3, #0
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 faca 	bl	8001d60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d19e      	bne.n	8001714 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f91e 	bl	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e01a      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2220      	movs	r2, #32
 80017f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_I2C_Mem_Write+0x224>)
 80017fe:	400b      	ands	r3, r1
 8001800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800181e:	2302      	movs	r3, #2
  }
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	460b      	mov	r3, r1
 8001840:	813b      	strh	r3, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	8979      	ldrh	r1, [r7, #10]
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <I2C_RequestMemoryWrite+0xa4>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fa83 	bl	8001d60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	69b9      	ldr	r1, [r7, #24]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f89c 	bl	800199c <I2C_WaitOnTXISFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e02c      	b.n	80018c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001874:	893b      	ldrh	r3, [r7, #8]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
 800187e:	e015      	b.n	80018ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001880:	893b      	ldrh	r3, [r7, #8]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	b29b      	uxth	r3, r3
 8001886:	b2da      	uxtb	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	69b9      	ldr	r1, [r7, #24]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f882 	bl	800199c <I2C_WaitOnTXISFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e012      	b.n	80018c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018a2:	893b      	ldrh	r3, [r7, #8]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f830 	bl	800191c <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	80002000 	.word	0x80002000

080018d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d103      	bne.n	80018f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d007      	beq.n	8001910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699a      	ldr	r2, [r3, #24]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	619a      	str	r2, [r3, #24]
  }
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800192c:	e022      	b.n	8001974 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d01e      	beq.n	8001974 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7fe fff5 	bl	8000924 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d113      	bne.n	8001974 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0220 	orr.w	r2, r3, #32
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e00f      	b.n	8001994 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4013      	ands	r3, r2
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	429a      	cmp	r2, r3
 8001990:	d0cd      	beq.n	800192e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019a8:	e02c      	b.n	8001a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f8ea 	bl	8001b88 <I2C_IsErrorOccurred>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e02a      	b.n	8001a14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d01e      	beq.n	8001a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c6:	f7fe ffad 	bl	8000924 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d302      	bcc.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d113      	bne.n	8001a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f043 0220 	orr.w	r2, r3, #32
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e007      	b.n	8001a14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d1cb      	bne.n	80019aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a28:	e028      	b.n	8001a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f8aa 	bl	8001b88 <I2C_IsErrorOccurred>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e026      	b.n	8001a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7fe ff71 	bl	8000924 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d113      	bne.n	8001a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f043 0220 	orr.w	r2, r3, #32
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e007      	b.n	8001a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d1cf      	bne.n	8001a2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001aa0:	e064      	b.n	8001b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f86e 	bl	8001b88 <I2C_IsErrorOccurred>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e062      	b.n	8001b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d138      	bne.n	8001b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d105      	bne.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e04e      	b.n	8001b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d107      	bne.n	8001afc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2210      	movs	r2, #16
 8001af2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2204      	movs	r2, #4
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
 8001afa:	e002      	b.n	8001b02 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2220      	movs	r2, #32
 8001b08:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001b16:	400b      	ands	r3, r1
 8001b18:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e022      	b.n	8001b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b36:	f7fe fef5 	bl	8000924 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d302      	bcc.n	8001b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10f      	bne.n	8001b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	f043 0220 	orr.w	r2, r3, #32
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e007      	b.n	8001b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d193      	bne.n	8001aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	fe00e800 	.word	0xfe00e800

08001b88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d075      	beq.n	8001ca0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bbc:	e056      	b.n	8001c6c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d052      	beq.n	8001c6c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7fe fead 	bl	8000924 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_IsErrorOccurred+0x54>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d147      	bne.n	8001c6c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfe:	d12e      	bne.n	8001c5e <I2C_IsErrorOccurred+0xd6>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c06:	d02a      	beq.n	8001c5e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001c08:	7cfb      	ldrb	r3, [r7, #19]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d027      	beq.n	8001c5e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c1c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c1e:	f7fe fe81 	bl	8000924 <HAL_GetTick>
 8001c22:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c24:	e01b      	b.n	8001c5e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c26:	f7fe fe7d 	bl	8000924 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b19      	cmp	r3, #25
 8001c32:	d914      	bls.n	8001c5e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d1dc      	bne.n	8001c26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d003      	beq.n	8001c82 <I2C_IsErrorOccurred+0xfa>
 8001c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d09d      	beq.n	8001bbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d01c      	beq.n	8001d50 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff fddc 	bl	80018d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <I2C_IsErrorOccurred+0x1d4>)
 8001d28:	400b      	ands	r3, r1
 8001d2a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	fe00e800 	.word	0xfe00e800

08001d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d72:	897b      	ldrh	r3, [r7, #10]
 8001d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d78:	7a7b      	ldrb	r3, [r7, #9]
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d80:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d8e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	0d5b      	lsrs	r3, r3, #21
 8001d9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <I2C_TransferConfig+0x60>)
 8001da0:	430b      	orrs	r3, r1
 8001da2:	43db      	mvns	r3, r3
 8001da4:	ea02 0103 	and.w	r1, r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	03ff63ff 	.word	0x03ff63ff

08001dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d138      	bne.n	8001e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e032      	b.n	8001e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d139      	bne.n	8001ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e033      	b.n	8001ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2224      	movs	r2, #36	; 0x24
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40007000 	.word	0x40007000

08001f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1e:	d130      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d038      	beq.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f36:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2232      	movs	r2, #50	; 0x32
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f54:	e002      	b.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f68:	d102      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f2      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d110      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e00f      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d007      	beq.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f98:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	431bde83 	.word	0x431bde83

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f000 bc11 	b.w	80027f2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fda:	4b9e      	ldr	r3, [pc, #632]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80e4 	beq.w	80021ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_RCC_OscConfig+0x4c>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	f040 808b 	bne.w	8002116 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 8087 	bne.w	8002116 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002008:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x64>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e3e8      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	4b8b      	ldr	r3, [pc, #556]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <HAL_RCC_OscConfig+0x7e>
 8002030:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	e005      	b.n	8002046 <HAL_RCC_OscConfig+0x8a>
 800203a:	4b86      	ldr	r3, [pc, #536]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800203c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002046:	4293      	cmp	r3, r2
 8002048:	d223      	bcs.n	8002092 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd96 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e3c9      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a7c      	ldr	r2, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4977      	ldr	r1, [pc, #476]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	4972      	ldr	r1, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	e025      	b.n	80020de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002092:	4b70      	ldr	r3, [pc, #448]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6f      	ldr	r2, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	496a      	ldr	r1, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	4965      	ldr	r1, [pc, #404]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fd56 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e389      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020de:	f000 fc6f 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	495a      	ldr	r1, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x29c>)
 80020f0:	5ccb      	ldrb	r3, [r1, r3]
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	fa22 f303 	lsr.w	r3, r2, r3
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_OscConfig+0x2a0>)
 80020fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020fe:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_OscConfig+0x2a4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fade 	bl	80006c4 <HAL_InitTick>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d052      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	e36d      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d032      	beq.n	8002184 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4c      	ldr	r2, [pc, #304]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800212a:	f7fe fbfb 	bl	8000924 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002132:	f7fe fbf7 	bl	8000924 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e356      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002144:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002150:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	493a      	ldr	r1, [pc, #232]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4935      	ldr	r1, [pc, #212]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e01a      	b.n	80021ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002184:	4b33      	ldr	r3, [pc, #204]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a32      	ldr	r2, [pc, #200]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002190:	f7fe fbc8 	bl	8000924 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002198:	f7fe fbc4 	bl	8000924 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e323      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021aa:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x1dc>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d073      	beq.n	80022ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x21c>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d10e      	bne.n	80021f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d063      	beq.n	80022ac <HAL_RCC_OscConfig+0x2f0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d15f      	bne.n	80022ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e300      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d106      	bne.n	8002208 <HAL_RCC_OscConfig+0x24c>
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0x288>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x270>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0x288>
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a05      	ldr	r2, [pc, #20]	; (8002254 <HAL_RCC_OscConfig+0x298>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fb6a 	bl	8000924 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002252:	e010      	b.n	8002276 <HAL_RCC_OscConfig+0x2ba>
 8002254:	40021000 	.word	0x40021000
 8002258:	080083c0 	.word	0x080083c0
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe fb5e 	bl	8000924 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e2bd      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	4baf      	ldr	r3, [pc, #700]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x2a8>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fb4e 	bl	8000924 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe fb4a 	bl	8000924 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e2a9      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	4ba5      	ldr	r3, [pc, #660]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x2d0>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d060      	beq.n	800237c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d005      	beq.n	80022cc <HAL_RCC_OscConfig+0x310>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d119      	bne.n	80022fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d116      	bne.n	80022fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022cc:	4b99      	ldr	r3, [pc, #612]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x328>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e286      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b93      	ldr	r3, [pc, #588]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	4990      	ldr	r1, [pc, #576]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	e040      	b.n	800237c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d023      	beq.n	800234a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002302:	4b8c      	ldr	r3, [pc, #560]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a8b      	ldr	r2, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fb09 	bl	8000924 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002316:	f7fe fb05 	bl	8000924 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e264      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	497c      	ldr	r1, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
 8002348:	e018      	b.n	800237c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a79      	ldr	r2, [pc, #484]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fae5 	bl	8000924 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fae1 	bl	8000924 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e240      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d03c      	beq.n	8002402 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01c      	beq.n	80023ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002390:	4b68      	ldr	r3, [pc, #416]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	4a67      	ldr	r2, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fac0 	bl	8000924 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fabc 	bl	8000924 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e21b      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ba:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80023bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ef      	beq.n	80023a8 <HAL_RCC_OscConfig+0x3ec>
 80023c8:	e01b      	b.n	8002402 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80023cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7fe faa3 	bl	8000924 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e2:	f7fe fa9f 	bl	8000924 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1fe      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f4:	4b4f      	ldr	r3, [pc, #316]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ef      	bne.n	80023e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80a6 	beq.w	800255c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a43      	ldr	r2, [pc, #268]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002438:	2301      	movs	r3, #1
 800243a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243c:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCC_OscConfig+0x57c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d118      	bne.n	800247a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_OscConfig+0x57c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <HAL_RCC_OscConfig+0x57c>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002454:	f7fe fa66 	bl	8000924 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7fe fa62 	bl	8000924 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1c1      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246e:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HAL_RCC_OscConfig+0x57c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x4d8>
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002492:	e024      	b.n	80024de <HAL_RCC_OscConfig+0x522>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d110      	bne.n	80024be <HAL_RCC_OscConfig+0x502>
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	4a24      	ldr	r2, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024bc:	e00f      	b.n	80024de <HAL_RCC_OscConfig+0x522>
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 80024d6:	f023 0304 	bic.w	r3, r3, #4
 80024da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fa1d 	bl	8000924 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fa19 	bl	8000924 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e176      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x578>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ed      	beq.n	80024ee <HAL_RCC_OscConfig+0x532>
 8002512:	e01a      	b.n	800254a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fa06 	bl	8000924 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251a:	e00f      	b.n	800253c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe fa02 	bl	8000924 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d906      	bls.n	800253c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e15f      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253c:	4baa      	ldr	r3, [pc, #680]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e8      	bne.n	800251c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002550:	4ba5      	ldr	r3, [pc, #660]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	4aa4      	ldr	r2, [pc, #656]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d03c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01c      	beq.n	80025aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002570:	4b9d      	ldr	r3, [pc, #628]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002576:	4a9c      	ldr	r2, [pc, #624]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe f9d0 	bl	8000924 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002588:	f7fe f9cc 	bl	8000924 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e12b      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 800259c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ef      	beq.n	8002588 <HAL_RCC_OscConfig+0x5cc>
 80025a8:	e01b      	b.n	80025e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025aa:	4b8f      	ldr	r3, [pc, #572]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80025ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b0:	4a8d      	ldr	r2, [pc, #564]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fe f9b3 	bl	8000924 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c2:	f7fe f9af 	bl	8000924 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e10e      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d4:	4b84      	ldr	r3, [pc, #528]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80025d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ef      	bne.n	80025c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8102 	beq.w	80027f0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f040 80c5 	bne.w	8002780 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025f6:	4b7c      	ldr	r3, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 0203 	and.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	429a      	cmp	r2, r3
 8002608:	d12c      	bne.n	8002664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	3b01      	subs	r3, #1
 8002616:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d123      	bne.n	8002664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d11b      	bne.n	8002664 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d113      	bne.n	8002664 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d109      	bne.n	8002664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	3b01      	subs	r3, #1
 800265e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d067      	beq.n	8002734 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d062      	beq.n	8002730 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0bb      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800267a:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002684:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002686:	f7fe f94d 	bl	8000924 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe f949 	bl	8000924 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0a8      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ac:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_RCC_OscConfig+0x830>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026bc:	3a01      	subs	r2, #1
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c6:	0212      	lsls	r2, r2, #8
 80026c8:	4311      	orrs	r1, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ce:	0852      	lsrs	r2, r2, #1
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0552      	lsls	r2, r2, #21
 80026d4:	4311      	orrs	r1, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026da:	0852      	lsrs	r2, r2, #1
 80026dc:	3a01      	subs	r2, #1
 80026de:	0652      	lsls	r2, r2, #25
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e6:	06d2      	lsls	r2, r2, #27
 80026e8:	430a      	orrs	r2, r1
 80026ea:	493f      	ldr	r1, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80026f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a39      	ldr	r2, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002708:	f7fe f90c 	bl	8000924 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe f908 	bl	8000924 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e067      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272e:	e05f      	b.n	80027f0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e05e      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002758:	f7fe f8e4 	bl	8000924 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe f8e0 	bl	8000924 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e03f      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x7a4>
 800277e:	e037      	b.n	80027f0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d02d      	beq.n	80027e2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 800278c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002790:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80027a4:	f023 0303 	bic.w	r3, r3, #3
 80027a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80027b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe f8b3 	bl	8000924 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe f8af 	bl	8000924 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e00e      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_RCC_OscConfig+0x82c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x806>
 80027e0:	e006      	b.n	80027f0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e005      	b.n	80027f2 <HAL_RCC_OscConfig+0x836>
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0c8      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4961      	ldr	r1, [pc, #388]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b0      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d04c      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d107      	bne.n	8002864 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002854:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d121      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e09e      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d107      	bne.n	800287c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d115      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e092      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002884:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e086      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e07e      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 0203 	bic.w	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	493f      	ldr	r1, [pc, #252]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b6:	f7fe f835 	bl	8000924 <HAL_GetTick>
 80028ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028be:	f7fe f831 	bl	8000924 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e066      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 020c 	and.w	r2, r3, #12
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d1eb      	bne.n	80028be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f2:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	492c      	ldr	r1, [pc, #176]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d210      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	4924      	ldr	r1, [pc, #144]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCC_ClockConfig+0x1b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e036      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4918      	ldr	r1, [pc, #96]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4910      	ldr	r1, [pc, #64]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002972:	f000 f825 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_ClockConfig+0x1b4>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490c      	ldr	r1, [pc, #48]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fe94 	bl	80006c4 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
 800299e:	72fb      	strb	r3, [r7, #11]

  return status;
 80029a0:	7afb      	ldrb	r3, [r7, #11]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40021000 	.word	0x40021000
 80029b4:	080083c0 	.word	0x080083c0
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x34>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d121      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d11e      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a00:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e005      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a10:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a1c:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	e004      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d134      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d003      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0xac>
 8002a64:	e005      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a68:	617b      	str	r3, [r7, #20]
      break;
 8002a6a:	e005      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a6e:	617b      	str	r3, [r7, #20]
      break;
 8002a70:	e002      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	617b      	str	r3, [r7, #20]
      break;
 8002a76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	fb02 f203 	mul.w	r2, r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	0e5b      	lsrs	r3, r3, #25
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	080083d8 	.word	0x080083d8
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	007a1200 	.word	0x007a1200

08002ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	080083d0 	.word	0x080083d0

08002b1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	220f      	movs	r2, #15
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCC_GetClockConfig+0x60>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0207 	and.w	r2, r3, #7
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40022000 	.word	0x40022000

08002b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b98:	f7ff f9ac 	bl	8001ef4 <HAL_PWREx_GetVoltageRange>
 8002b9c:	6178      	str	r0, [r7, #20]
 8002b9e:	e014      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb8:	f7ff f99c 	bl	8001ef4 <HAL_PWREx_GetVoltageRange>
 8002bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d10b      	bne.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d919      	bls.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2ba0      	cmp	r3, #160	; 0xa0
 8002bdc:	d902      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bde:	2302      	movs	r3, #2
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e013      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e010      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d902      	bls.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e00a      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b80      	cmp	r3, #128	; 0x80
 8002bfa:	d102      	bne.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e004      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d101      	bne.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0207 	bic.w	r2, r3, #7
 8002c14:	4909      	ldr	r1, [pc, #36]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40022000 	.word	0x40022000

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c64:	d01a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c6a:	d814      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c74:	d10f      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fa12 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	494e      	ldr	r1, [pc, #312]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 809e 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a3f      	ldr	r2, [pc, #252]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a39      	ldr	r2, [pc, #228]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d10:	f7fd fe08 	bl	8000924 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d16:	e009      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fd fe04 	bl	8000924 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	74fb      	strb	r3, [r7, #19]
        break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d2c:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d15a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d019      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d86:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fd fdc4 	bl	8000924 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fd fdc0 	bl	8000924 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
            break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ec      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002de2:	e009      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df8:	7c7b      	ldrb	r3, [r7, #17]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4bac      	ldr	r3, [pc, #688]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	4aab      	ldr	r2, [pc, #684]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e16:	4ba6      	ldr	r3, [pc, #664]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 0203 	bic.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	49a2      	ldr	r1, [pc, #648]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e38:	4b9d      	ldr	r3, [pc, #628]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 020c 	bic.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	499a      	ldr	r1, [pc, #616]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e5a:	4b95      	ldr	r3, [pc, #596]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	4991      	ldr	r1, [pc, #580]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e7c:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	4989      	ldr	r1, [pc, #548]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e9e:	4b84      	ldr	r3, [pc, #528]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4980      	ldr	r1, [pc, #512]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec0:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4978      	ldr	r1, [pc, #480]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ee2:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef0:	496f      	ldr	r1, [pc, #444]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f04:	4b6a      	ldr	r3, [pc, #424]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	4967      	ldr	r1, [pc, #412]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f26:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	495e      	ldr	r1, [pc, #376]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	4956      	ldr	r1, [pc, #344]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f70:	f023 0203 	bic.w	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d028      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f8c:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	4945      	ldr	r1, [pc, #276]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002faa:	d106      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a3f      	ldr	r2, [pc, #252]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb6:	60d3      	str	r3, [r2, #12]
 8002fb8:	e011      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f872 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* set overall return value */
        status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d028      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	492d      	ldr	r1, [pc, #180]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003008:	d106      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	4a28      	ldr	r2, [pc, #160]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003014:	60d3      	str	r3, [r2, #12]
 8003016:	e011      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003020:	d10c      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f843 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01c      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003066:	d10c      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f820 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x442>
      {
        /* set overall return value */
        status = ret;
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c2:	4b74      	ldr	r3, [pc, #464]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d018      	beq.n	8003100 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ce:	4b71      	ldr	r3, [pc, #452]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10d      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
       ||
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030e6:	4b6b      	ldr	r3, [pc, #428]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
       ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d047      	beq.n	800318a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e044      	b.n	800318a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d018      	beq.n	800313a <RCCEx_PLLSAI1_Config+0x86>
 8003108:	2b03      	cmp	r3, #3
 800310a:	d825      	bhi.n	8003158 <RCCEx_PLLSAI1_Config+0xa4>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d002      	beq.n	8003116 <RCCEx_PLLSAI1_Config+0x62>
 8003110:	2b02      	cmp	r3, #2
 8003112:	d009      	beq.n	8003128 <RCCEx_PLLSAI1_Config+0x74>
 8003114:	e020      	b.n	8003158 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11d      	bne.n	800315e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003126:	e01a      	b.n	800315e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003128:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003138:	e013      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800313a:	4b56      	ldr	r3, [pc, #344]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003146:	4b53      	ldr	r3, [pc, #332]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003156:	e006      	b.n	8003166 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      break;
 800315c:	e004      	b.n	8003168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800315e:	bf00      	nop
 8003160:	e002      	b.n	8003168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003166:	bf00      	nop
    }

    if(status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	430b      	orrs	r3, r1
 8003184:	4943      	ldr	r1, [pc, #268]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003186:	4313      	orrs	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d17c      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003190:	4b40      	ldr	r3, [pc, #256]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3f      	ldr	r2, [pc, #252]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800319a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800319c:	f7fd fbc2 	bl	8000924 <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a2:	e009      	b.n	80031b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a4:	f7fd fbbe 	bl	8000924 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	73fb      	strb	r3, [r7, #15]
        break;
 80031b6:	e005      	b.n	80031c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ef      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d15f      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d110      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6892      	ldr	r2, [r2, #8]
 80031e0:	0211      	lsls	r1, r2, #8
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	06d2      	lsls	r2, r2, #27
 80031e8:	430a      	orrs	r2, r1
 80031ea:	492a      	ldr	r1, [pc, #168]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	610b      	str	r3, [r1, #16]
 80031f0:	e027      	b.n	8003242 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d112      	bne.n	800321e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6912      	ldr	r2, [r2, #16]
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	0552      	lsls	r2, r2, #21
 8003214:	430a      	orrs	r2, r1
 8003216:	491f      	ldr	r1, [pc, #124]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	610b      	str	r3, [r1, #16]
 800321c:	e011      	b.n	8003242 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	0211      	lsls	r1, r2, #8
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6952      	ldr	r2, [r2, #20]
 8003234:	0852      	lsrs	r2, r2, #1
 8003236:	3a01      	subs	r2, #1
 8003238:	0652      	lsls	r2, r2, #25
 800323a:	430a      	orrs	r2, r1
 800323c:	4915      	ldr	r1, [pc, #84]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800324c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fd fb69 	bl	8000924 <HAL_GetTick>
 8003252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003254:	e009      	b.n	800326a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003256:	f7fd fb65 	bl	8000924 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d902      	bls.n	800326a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	73fb      	strb	r3, [r7, #15]
          break;
 8003268:	e005      	b.n	8003276 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0ef      	beq.n	8003256 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e049      	b.n	800333e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f841 	bl	8003346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 f9e4 	bl	80036a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e040      	b.n	80033f6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_TIM_Base_Start_IT+0xa8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x58>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d009      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x58>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_TIM_Base_Start_IT+0xac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x58>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a17      	ldr	r2, [pc, #92]	; (800340c <HAL_TIM_Base_Start_IT+0xb0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d115      	bne.n	80033e0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_TIM_Base_Start_IT+0xb4>)
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d015      	beq.n	80033f2 <HAL_TIM_Base_Start_IT+0x96>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d011      	beq.n	80033f2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033de:	e008      	b.n	80033f2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e000      	b.n	80033f4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40000400 	.word	0x40000400
 800340c:	40014000 	.word	0x40014000
 8003410:	00010007 	.word	0x00010007

08003414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0202 	mvn.w	r2, #2
 8003440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f905 	bl	8003666 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8f7 	bl	8003652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f908 	bl	800367a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0204 	mvn.w	r2, #4
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8db 	bl	8003666 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8cd 	bl	8003652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f8de 	bl	800367a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0208 	mvn.w	r2, #8
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2204      	movs	r2, #4
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8b1 	bl	8003666 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8a3 	bl	8003652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8b4 	bl	800367a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b10      	cmp	r3, #16
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b10      	cmp	r3, #16
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0210 	mvn.w	r2, #16
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2208      	movs	r2, #8
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f887 	bl	8003666 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f879 	bl	8003652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f88a 	bl	800367a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0201 	mvn.w	r2, #1
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fc ffd2 	bl	800053c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8e8 	bl	8003794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d2:	d10e      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b80      	cmp	r3, #128	; 0x80
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8db 	bl	80037a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d10e      	bne.n	800361e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d107      	bne.n	800361e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f838 	bl	800368e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b20      	cmp	r3, #32
 800362a:	d10e      	bne.n	800364a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b20      	cmp	r3, #32
 8003638:	d107      	bne.n	800364a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f06f 0220 	mvn.w	r2, #32
 8003642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f89b 	bl	8003780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a2e      	ldr	r2, [pc, #184]	; (8003770 <TIM_Base_SetConfig+0xcc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_Base_SetConfig+0x28>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x28>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <TIM_Base_SetConfig+0xd0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <TIM_Base_SetConfig+0xcc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <TIM_Base_SetConfig+0xd0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <TIM_Base_SetConfig+0xd4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <TIM_Base_SetConfig+0xd8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <TIM_Base_SetConfig+0xcc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0xb0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <TIM_Base_SetConfig+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <TIM_Base_SetConfig+0xd8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	615a      	str	r2, [r3, #20]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40014000 	.word	0x40014000
 800377c:	40014400 	.word	0x40014400

08003780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <__NVIC_SetPriority>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db0a      	blt.n	80037e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	490c      	ldr	r1, [pc, #48]	; (8003808 <__NVIC_SetPriority+0x4c>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	440b      	add	r3, r1
 80037e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037e4:	e00a      	b.n	80037fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <__NVIC_SetPriority+0x50>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3b04      	subs	r3, #4
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	761a      	strb	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <SysTick_Handler+0x1c>)
 8003816:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003818:	f002 fa9a 	bl	8005d50 <xTaskGetSchedulerState>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003822:	f003 f981 	bl	8006b28 <xPortSysTickHandler>
  }
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	e000e010 	.word	0xe000e010

08003830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003834:	2100      	movs	r1, #0
 8003836:	f06f 0004 	mvn.w	r0, #4
 800383a:	f7ff ffbf 	bl	80037bc <__NVIC_SetPriority>
#endif
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800384a:	f3ef 8305 	mrs	r3, IPSR
 800384e:	603b      	str	r3, [r7, #0]
  return(result);
 8003850:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003856:	f06f 0305 	mvn.w	r3, #5
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	e00c      	b.n	8003878 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <osKernelInitialize+0x44>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <osKernelInitialize+0x44>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800386c:	2300      	movs	r3, #0
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	e002      	b.n	8003878 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003878:	687b      	ldr	r3, [r7, #4]
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000094 	.word	0x20000094

0800388c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003892:	f3ef 8305 	mrs	r3, IPSR
 8003896:	603b      	str	r3, [r7, #0]
  return(result);
 8003898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800389e:	f06f 0305 	mvn.w	r3, #5
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	e010      	b.n	80038c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <osKernelStart+0x48>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d109      	bne.n	80038c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038ae:	f7ff ffbf 	bl	8003830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <osKernelStart+0x48>)
 80038b4:	2202      	movs	r2, #2
 80038b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038b8:	f001 fdee 	bl	8005498 <vTaskStartScheduler>
      stat = osOK;
 80038bc:	2300      	movs	r3, #0
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	e002      	b.n	80038c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295
 80038c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038c8:	687b      	ldr	r3, [r7, #4]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000094 	.word	0x20000094

080038d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af04      	add	r7, sp, #16
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e8:	f3ef 8305 	mrs	r3, IPSR
 80038ec:	617b      	str	r3, [r7, #20]
  return(result);
 80038ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d17e      	bne.n	80039f2 <osThreadNew+0x11a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d07b      	beq.n	80039f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038fe:	2318      	movs	r3, #24
 8003900:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d045      	beq.n	800399e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <osThreadNew+0x48>
        name = attr->name;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <osThreadNew+0x6e>
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b38      	cmp	r3, #56	; 0x38
 8003938:	d805      	bhi.n	8003946 <osThreadNew+0x6e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <osThreadNew+0x72>
        return (NULL);
 8003946:	2300      	movs	r3, #0
 8003948:	e054      	b.n	80039f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00e      	beq.n	8003980 <osThreadNew+0xa8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2bbb      	cmp	r3, #187	; 0xbb
 8003968:	d90a      	bls.n	8003980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <osThreadNew+0xa8>
        mem = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e010      	b.n	80039a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10c      	bne.n	80039a2 <osThreadNew+0xca>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <osThreadNew+0xca>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <osThreadNew+0xca>
          mem = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e001      	b.n	80039a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d110      	bne.n	80039ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039b0:	9202      	str	r2, [sp, #8]
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6a3a      	ldr	r2, [r7, #32]
 80039bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f001 fb7e 	bl	80050c0 <xTaskCreateStatic>
 80039c4:	4603      	mov	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e013      	b.n	80039f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d110      	bne.n	80039f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f001 fbc9 	bl	800517a <xTaskCreate>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d001      	beq.n	80039f2 <osThreadNew+0x11a>
            hTask = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039f2:	693b      	ldr	r3, [r7, #16]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a04:	f3ef 8305 	mrs	r3, IPSR
 8003a08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <osDelay+0x1c>
    stat = osErrorISR;
 8003a10:	f06f 0305 	mvn.w	r3, #5
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e007      	b.n	8003a28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f001 fd04 	bl	8005430 <vTaskDelay>
    }
  }

  return (stat);
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08a      	sub	sp, #40	; 0x28
 8003a36:	af02      	add	r7, sp, #8
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a42:	f3ef 8305 	mrs	r3, IPSR
 8003a46:	613b      	str	r3, [r7, #16]
  return(result);
 8003a48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d175      	bne.n	8003b3a <osSemaphoreNew+0x108>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d072      	beq.n	8003b3a <osSemaphoreNew+0x108>
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d86e      	bhi.n	8003b3a <osSemaphoreNew+0x108>
    mem = -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d006      	beq.n	8003a7e <osSemaphoreNew+0x4c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b4f      	cmp	r3, #79	; 0x4f
 8003a76:	d902      	bls.n	8003a7e <osSemaphoreNew+0x4c>
        mem = 1;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e00c      	b.n	8003a98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <osSemaphoreNew+0x66>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <osSemaphoreNew+0x66>
          mem = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e001      	b.n	8003a98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d04c      	beq.n	8003b3a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d128      	bne.n	8003af8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10a      	bne.n	8003ac2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	9200      	str	r2, [sp, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f000 fb5b 	bl	8004174 <xQueueGenericCreateStatic>
 8003abe:	61f8      	str	r0, [r7, #28]
 8003ac0:	e005      	b.n	8003ace <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f000 fbcc 	bl	8004264 <xQueueGenericCreate>
 8003acc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d022      	beq.n	8003b1a <osSemaphoreNew+0xe8>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01f      	beq.n	8003b1a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ada:	2300      	movs	r3, #0
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	69f8      	ldr	r0, [r7, #28]
 8003ae2:	f000 fc87 	bl	80043f4 <xQueueGenericSend>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d016      	beq.n	8003b1a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003aec:	69f8      	ldr	r0, [r7, #28]
 8003aee:	f001 f913 	bl	8004d18 <vQueueDelete>
            hSemaphore = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e010      	b.n	8003b1a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d108      	bne.n	8003b10 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fc09 	bl	800431e <xQueueCreateCountingSemaphoreStatic>
 8003b0c:	61f8      	str	r0, [r7, #28]
 8003b0e:	e004      	b.n	8003b1a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fc3a 	bl	800438c <xQueueCreateCountingSemaphore>
 8003b18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e001      	b.n	8003b32 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	69f8      	ldr	r0, [r7, #28]
 8003b36:	f001 fa3b 	bl	8004fb0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003b5c:	f06f 0303 	mvn.w	r3, #3
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e039      	b.n	8003bd8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b64:	f3ef 8305 	mrs	r3, IPSR
 8003b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d022      	beq.n	8003bb6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003b76:	f06f 0303 	mvn.w	r3, #3
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e02c      	b.n	8003bd8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	461a      	mov	r2, r3
 8003b88:	2100      	movs	r1, #0
 8003b8a:	6938      	ldr	r0, [r7, #16]
 8003b8c:	f001 f844 	bl	8004c18 <xQueueReceiveFromISR>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d003      	beq.n	8003b9e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003b96:	f06f 0302 	mvn.w	r3, #2
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e01c      	b.n	8003bd8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d019      	beq.n	8003bd8 <osSemaphoreAcquire+0x94>
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <osSemaphoreAcquire+0xa0>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	e010      	b.n	8003bd8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	6938      	ldr	r0, [r7, #16]
 8003bba:	f000 ff21 	bl	8004a00 <xQueueSemaphoreTake>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d009      	beq.n	8003bd8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003bca:	f06f 0301 	mvn.w	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e002      	b.n	8003bd8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003bd2:	f06f 0302 	mvn.w	r3, #2
 8003bd6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003bd8:	697b      	ldr	r3, [r7, #20]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003bfe:	f06f 0303 	mvn.w	r3, #3
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e02c      	b.n	8003c60 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c06:	f3ef 8305 	mrs	r3, IPSR
 8003c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6938      	ldr	r0, [r7, #16]
 8003c1e:	f000 fd82 	bl	8004726 <xQueueGiveFromISR>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d003      	beq.n	8003c30 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003c28:	f06f 0302 	mvn.w	r3, #2
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e017      	b.n	8003c60 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <osSemaphoreRelease+0x78>
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <osSemaphoreRelease+0x84>)
 8003c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	e00b      	b.n	8003c60 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6938      	ldr	r0, [r7, #16]
 8003c50:	f000 fbd0 	bl	80043f4 <xQueueGenericSend>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d002      	beq.n	8003c60 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003c5a:	f06f 0302 	mvn.w	r3, #2
 8003c5e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003c60:	697b      	ldr	r3, [r7, #20]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c80:	f3ef 8305 	mrs	r3, IPSR
 8003c84:	613b      	str	r3, [r7, #16]
  return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d15f      	bne.n	8003d4c <osMessageQueueNew+0xdc>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d05c      	beq.n	8003d4c <osMessageQueueNew+0xdc>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d059      	beq.n	8003d4c <osMessageQueueNew+0xdc>
    mem = -1;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d029      	beq.n	8003cf8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <osMessageQueueNew+0x62>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b4f      	cmp	r3, #79	; 0x4f
 8003cb2:	d90e      	bls.n	8003cd2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <osMessageQueueNew+0x62>
        mem = 1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e014      	b.n	8003cfc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d110      	bne.n	8003cfc <osMessageQueueNew+0x8c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d108      	bne.n	8003cfc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <osMessageQueueNew+0x8c>
          mem = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e001      	b.n	8003cfc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10b      	bne.n	8003d1a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	9100      	str	r1, [sp, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa2f 	bl	8004174 <xQueueGenericCreateStatic>
 8003d16:	61f8      	str	r0, [r7, #28]
 8003d18:	e008      	b.n	8003d2c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003d20:	2200      	movs	r2, #0
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fa9d 	bl	8004264 <xQueueGenericCreate>
 8003d2a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e001      	b.n	8003d44 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	69f8      	ldr	r0, [r7, #28]
 8003d48:	f001 f932 	bl	8004fb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3720      	adds	r7, #32
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d70:	f3ef 8305 	mrs	r3, IPSR
 8003d74:	617b      	str	r3, [r7, #20]
  return(result);
 8003d76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d028      	beq.n	8003dce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <osMessageQueuePut+0x36>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <osMessageQueuePut+0x36>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003d8e:	f06f 0303 	mvn.w	r3, #3
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e038      	b.n	8003e08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003d9a:	f107 0210 	add.w	r2, r7, #16
 8003d9e:	2300      	movs	r3, #0
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	69b8      	ldr	r0, [r7, #24]
 8003da4:	f000 fc24 	bl	80045f0 <xQueueGenericSendFromISR>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d003      	beq.n	8003db6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003dae:	f06f 0302 	mvn.w	r3, #2
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e028      	b.n	8003e08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d025      	beq.n	8003e08 <osMessageQueuePut+0xb0>
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <osMessageQueuePut+0xbc>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	e01c      	b.n	8003e08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <osMessageQueuePut+0x82>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003dda:	f06f 0303 	mvn.w	r3, #3
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e012      	b.n	8003e08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003de2:	2300      	movs	r3, #0
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	69b8      	ldr	r0, [r7, #24]
 8003dea:	f000 fb03 	bl	80043f4 <xQueueGenericSend>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d009      	beq.n	8003e08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003dfa:	f06f 0301 	mvn.w	r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e002      	b.n	8003e08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003e02:	f06f 0302 	mvn.w	r3, #2
 8003e06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e08:	69fb      	ldr	r3, [r7, #28]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e2e:	f3ef 8305 	mrs	r3, IPSR
 8003e32:	617b      	str	r3, [r7, #20]
  return(result);
 8003e34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d028      	beq.n	8003e8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <osMessageQueueGet+0x34>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <osMessageQueueGet+0x34>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003e4c:	f06f 0303 	mvn.w	r3, #3
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e037      	b.n	8003ec4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f000 fed9 	bl	8004c18 <xQueueReceiveFromISR>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d003      	beq.n	8003e74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003e6c:	f06f 0302 	mvn.w	r3, #2
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	e027      	b.n	8003ec4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d024      	beq.n	8003ec4 <osMessageQueueGet+0xac>
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <osMessageQueueGet+0xb8>)
 8003e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	e01b      	b.n	8003ec4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <osMessageQueueGet+0x80>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003e98:	f06f 0303 	mvn.w	r3, #3
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e011      	b.n	8003ec4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	69b8      	ldr	r0, [r7, #24]
 8003ea6:	f000 fccb 	bl	8004840 <xQueueReceive>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d009      	beq.n	8003ec4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003eb6:	f06f 0301 	mvn.w	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e002      	b.n	8003ec4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003ebe:	f06f 0302 	mvn.w	r3, #2
 8003ec2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <vApplicationGetIdleTaskMemory+0x30>)
 8003eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000098 	.word	0x20000098
 8003f04:	20000154 	.word	0x20000154

08003f08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <vApplicationGetTimerTaskMemory+0x30>)
 8003f1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	20000354 	.word	0x20000354
 8003f38:	20000410 	.word	0x20000410

08003f3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0208 	add.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f103 0208 	add.w	r2, r3, #8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f103 0208 	add.w	r2, r3, #8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d103      	bne.n	8003ffe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e00c      	b.n	8004018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3308      	adds	r3, #8
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e002      	b.n	800400c <vListInsert+0x2e>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d2f6      	bcs.n	8004006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6892      	ldr	r2, [r2, #8]
 8004066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6852      	ldr	r2, [r2, #4]
 8004070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d103      	bne.n	8004084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040ce:	f002 fc99 	bl	8006a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	441a      	add	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	3b01      	subs	r3, #1
 8004100:	68f9      	ldr	r1, [r7, #12]
 8004102:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	441a      	add	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01a      	beq.n	8004162 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fc4b 	bl	80059cc <xTaskRemoveFromEventList>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <xQueueGenericReset+0xcc>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	e009      	b.n	8004162 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3310      	adds	r3, #16
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fef2 	bl	8003f3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3324      	adds	r3, #36	; 0x24
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff feed 	bl	8003f3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004162:	f002 fc7f 	bl	8006a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004166:	2301      	movs	r3, #1
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08e      	sub	sp, #56	; 0x38
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <xQueueGenericCreateStatic+0x52>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <xQueueGenericCreateStatic+0x56>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <xQueueGenericCreateStatic+0x58>
 80041ca:	2300      	movs	r3, #0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80041d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d4:	f383 8811 	msr	BASEPRI, r3
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f3bf 8f4f 	dsb	sy
 80041e0:	623b      	str	r3, [r7, #32]
}
 80041e2:	bf00      	nop
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <xQueueGenericCreateStatic+0x7e>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <xQueueGenericCreateStatic+0x82>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <xQueueGenericCreateStatic+0x84>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	61fb      	str	r3, [r7, #28]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004212:	2350      	movs	r3, #80	; 0x50
 8004214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b50      	cmp	r3, #80	; 0x50
 800421a:	d00a      	beq.n	8004232 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	61bb      	str	r3, [r7, #24]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004232:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004246:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f83f 	bl	80042d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800425c:	4618      	mov	r0, r3
 800425e:	3730      	adds	r7, #48	; 0x30
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	613b      	str	r3, [r7, #16]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3350      	adds	r3, #80	; 0x50
 800429c:	4618      	mov	r0, r3
 800429e:	f002 fcd3 	bl	8006c48 <pvPortMalloc>
 80042a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3350      	adds	r3, #80	; 0x50
 80042b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042bc:	79fa      	ldrb	r2, [r7, #7]
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f805 	bl	80042d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042ce:	69bb      	ldr	r3, [r7, #24]
	}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e002      	b.n	80042fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004306:	2101      	movs	r1, #1
 8004308:	69b8      	ldr	r0, [r7, #24]
 800430a:	f7ff fecb 	bl	80040a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08a      	sub	sp, #40	; 0x28
 8004322:	af02      	add	r7, sp, #8
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	61bb      	str	r3, [r7, #24]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	429a      	cmp	r2, r3
 800434c:	d90a      	bls.n	8004364 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	617b      	str	r3, [r7, #20]
}
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004364:	2302      	movs	r3, #2
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff00 	bl	8004174 <xQueueGenericCreateStatic>
 8004374:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004382:	69fb      	ldr	r3, [r7, #28]
	}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	613b      	str	r3, [r7, #16]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d90a      	bls.n	80043d0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60fb      	str	r3, [r7, #12]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043d0:	2202      	movs	r2, #2
 80043d2:	2100      	movs	r1, #0
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff ff45 	bl	8004264 <xQueueGenericCreate>
 80043da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80043e8:	697b      	ldr	r3, [r7, #20]
	}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08e      	sub	sp, #56	; 0x38
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueGenericSend+0x32>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <xQueueGenericSend+0x40>
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <xQueueGenericSend+0x44>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <xQueueGenericSend+0x46>
 8004438:	2300      	movs	r3, #0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <xQueueGenericSend+0x60>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d103      	bne.n	8004462 <xQueueGenericSend+0x6e>
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <xQueueGenericSend+0x72>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <xQueueGenericSend+0x74>
 8004466:	2300      	movs	r3, #0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <xQueueGenericSend+0x8e>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	623b      	str	r3, [r7, #32]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004482:	f001 fc65 	bl	8005d50 <xTaskGetSchedulerState>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <xQueueGenericSend+0x9e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <xQueueGenericSend+0xa2>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <xQueueGenericSend+0xa4>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	61fb      	str	r3, [r7, #28]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044b2:	f002 faa7 	bl	8006a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <xQueueGenericSend+0xd4>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d129      	bne.n	800451c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ce:	f000 fc5e 	bl	8004d8e <prvCopyDataToQueue>
 80044d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	3324      	adds	r3, #36	; 0x24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 fa73 	bl	80059cc <xTaskRemoveFromEventList>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044ec:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <xQueueGenericSend+0x1f8>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	e00a      	b.n	8004514 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004504:	4b39      	ldr	r3, [pc, #228]	; (80045ec <xQueueGenericSend+0x1f8>)
 8004506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004514:	f002 faa6 	bl	8006a64 <vPortExitCritical>
				return pdPASS;
 8004518:	2301      	movs	r3, #1
 800451a:	e063      	b.n	80045e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004522:	f002 fa9f 	bl	8006a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004526:	2300      	movs	r3, #0
 8004528:	e05c      	b.n	80045e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	4618      	mov	r0, r3
 8004536:	f001 faad 	bl	8005a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800453e:	f002 fa91 	bl	8006a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004542:	f001 f819 	bl	8005578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004546:	f002 fa5d 	bl	8006a04 <vPortEnterCritical>
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004550:	b25b      	sxtb	r3, r3
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d103      	bne.n	8004560 <xQueueGenericSend+0x16c>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004566:	b25b      	sxtb	r3, r3
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d103      	bne.n	8004576 <xQueueGenericSend+0x182>
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004576:	f002 fa75 	bl	8006a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800457a:	1d3a      	adds	r2, r7, #4
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f001 fa9c 	bl	8005ac0 <xTaskCheckForTimeOut>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d124      	bne.n	80045d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800458e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004590:	f000 fcf5 	bl	8004f7e <prvIsQueueFull>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d018      	beq.n	80045cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	3310      	adds	r3, #16
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f9c2 	bl	800592c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045aa:	f000 fc80 	bl	8004eae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045ae:	f000 fff1 	bl	8005594 <xTaskResumeAll>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f47f af7c 	bne.w	80044b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <xQueueGenericSend+0x1f8>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	e772      	b.n	80044b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ce:	f000 fc6e 	bl	8004eae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045d2:	f000 ffdf 	bl	8005594 <xTaskResumeAll>
 80045d6:	e76c      	b.n	80044b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045da:	f000 fc68 	bl	8004eae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045de:	f000 ffd9 	bl	8005594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3738      	adds	r7, #56	; 0x38
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b090      	sub	sp, #64	; 0x40
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <xQueueGenericSendFromISR+0x3c>
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <xQueueGenericSendFromISR+0x40>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <xQueueGenericSendFromISR+0x42>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d103      	bne.n	800465a <xQueueGenericSendFromISR+0x6a>
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <xQueueGenericSendFromISR+0x6e>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericSendFromISR+0x70>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800467a:	f002 faa5 	bl	8006bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800467e:	f3ef 8211 	mrs	r2, BASEPRI
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	61fa      	str	r2, [r7, #28]
 8004694:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004696:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <xQueueGenericSendFromISR+0xbc>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d12f      	bne.n	800470c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046c2:	f000 fb64 	bl	8004d8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d112      	bne.n	80046f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	3324      	adds	r3, #36	; 0x24
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f975 	bl	80059cc <xTaskRemoveFromEventList>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e007      	b.n	8004706 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046fa:	3301      	adds	r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	b25a      	sxtb	r2, r3
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004706:	2301      	movs	r3, #1
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800470a:	e001      	b.n	8004710 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800470c:	2300      	movs	r3, #0
 800470e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004712:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800471a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800471e:	4618      	mov	r0, r3
 8004720:	3740      	adds	r7, #64	; 0x40
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b08e      	sub	sp, #56	; 0x38
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	623b      	str	r3, [r7, #32]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	61fb      	str	r3, [r7, #28]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <xQueueGiveFromISR+0x58>
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <xQueueGiveFromISR+0x5c>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <xQueueGiveFromISR+0x5e>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xQueueGiveFromISR+0x78>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	61bb      	str	r3, [r7, #24]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800479e:	f002 fa13 	bl	8006bc8 <vPortValidateInterruptPriority>
	__asm volatile
 80047a2:	f3ef 8211 	mrs	r2, BASEPRI
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	617a      	str	r2, [r7, #20]
 80047b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80047ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d22b      	bcs.n	8004826 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d112      	bne.n	8004810 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 f8e8 	bl	80059cc <xTaskRemoveFromEventList>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e007      	b.n	8004820 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004814:	3301      	adds	r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	b25a      	sxtb	r2, r3
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004820:	2301      	movs	r3, #1
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
 8004824:	e001      	b.n	800482a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004826:	2300      	movs	r3, #0
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f383 8811 	msr	BASEPRI, r3
}
 8004834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004838:	4618      	mov	r0, r3
 800483a:	3738      	adds	r7, #56	; 0x38
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <xQueueReceive+0x30>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	623b      	str	r3, [r7, #32]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <xQueueReceive+0x3e>
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <xQueueReceive+0x42>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueReceive+0x44>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <xQueueReceive+0x5e>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61fb      	str	r3, [r7, #28]
}
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800489e:	f001 fa57 	bl	8005d50 <xTaskGetSchedulerState>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <xQueueReceive+0x6e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <xQueueReceive+0x72>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <xQueueReceive+0x74>
 80048b2:	2300      	movs	r3, #0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <xQueueReceive+0x8e>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	61bb      	str	r3, [r7, #24]
}
 80048ca:	bf00      	nop
 80048cc:	e7fe      	b.n	80048cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ce:	f002 f899 	bl	8006a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01f      	beq.n	800491e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e2:	f000 fabe 	bl	8004e62 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	1e5a      	subs	r2, r3, #1
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00f      	beq.n	8004916 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	3310      	adds	r3, #16
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 f866 	bl	80059cc <xTaskRemoveFromEventList>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004906:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <xQueueReceive+0x1bc>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004916:	f002 f8a5 	bl	8006a64 <vPortExitCritical>
				return pdPASS;
 800491a:	2301      	movs	r3, #1
 800491c:	e069      	b.n	80049f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004924:	f002 f89e 	bl	8006a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004928:	2300      	movs	r3, #0
 800492a:	e062      	b.n	80049f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f8ac 	bl	8005a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004940:	f002 f890 	bl	8006a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004944:	f000 fe18 	bl	8005578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004948:	f002 f85c 	bl	8006a04 <vPortEnterCritical>
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d103      	bne.n	8004962 <xQueueReceive+0x122>
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004968:	b25b      	sxtb	r3, r3
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <xQueueReceive+0x138>
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004978:	f002 f874 	bl	8006a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800497c:	1d3a      	adds	r2, r7, #4
 800497e:	f107 0310 	add.w	r3, r7, #16
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f89b 	bl	8005ac0 <xTaskCheckForTimeOut>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d123      	bne.n	80049d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004992:	f000 fade 	bl	8004f52 <prvIsQueueEmpty>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d017      	beq.n	80049cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	3324      	adds	r3, #36	; 0x24
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 ffc1 	bl	800592c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ac:	f000 fa7f 	bl	8004eae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049b0:	f000 fdf0 	bl	8005594 <xTaskResumeAll>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d189      	bne.n	80048ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <xQueueReceive+0x1bc>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	e780      	b.n	80048ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ce:	f000 fa6e 	bl	8004eae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049d2:	f000 fddf 	bl	8005594 <xTaskResumeAll>
 80049d6:	e77a      	b.n	80048ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049da:	f000 fa68 	bl	8004eae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049de:	f000 fdd9 	bl	8005594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e4:	f000 fab5 	bl	8004f52 <prvIsQueueEmpty>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f43f af6f 	beq.w	80048ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3730      	adds	r7, #48	; 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	e000ed04 	.word	0xe000ed04

08004a00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	623b      	str	r3, [r7, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61fb      	str	r3, [r7, #28]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a50:	f001 f97e 	bl	8005d50 <xTaskGetSchedulerState>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <xQueueSemaphoreTake+0x60>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <xQueueSemaphoreTake+0x64>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <xQueueSemaphoreTake+0x66>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61bb      	str	r3, [r7, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a80:	f001 ffc0 	bl	8006a04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d024      	beq.n	8004ada <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	1e5a      	subs	r2, r3, #1
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004aa0:	f001 facc 	bl	800603c <pvTaskIncrementMutexHeldCount>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00f      	beq.n	8004ad2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 ff88 	bl	80059cc <xTaskRemoveFromEventList>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ac2:	4b54      	ldr	r3, [pc, #336]	; (8004c14 <xQueueSemaphoreTake+0x214>)
 8004ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ad2:	f001 ffc7 	bl	8006a64 <vPortExitCritical>
				return pdPASS;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e097      	b.n	8004c0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d111      	bne.n	8004b04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	617b      	str	r3, [r7, #20]
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004afc:	f001 ffb2 	bl	8006a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e082      	b.n	8004c0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b0a:	f107 030c 	add.w	r3, r7, #12
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 ffc0 	bl	8005a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b18:	f001 ffa4 	bl	8006a64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b1c:	f000 fd2c 	bl	8005578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b20:	f001 ff70 	bl	8006a04 <vPortEnterCritical>
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b2a:	b25b      	sxtb	r3, r3
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d103      	bne.n	8004b3a <xQueueSemaphoreTake+0x13a>
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d103      	bne.n	8004b50 <xQueueSemaphoreTake+0x150>
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b50:	f001 ff88 	bl	8006a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b54:	463a      	mov	r2, r7
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 ffaf 	bl	8005ac0 <xTaskCheckForTimeOut>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d132      	bne.n	8004bce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b6a:	f000 f9f2 	bl	8004f52 <prvIsQueueEmpty>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d026      	beq.n	8004bc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b7c:	f001 ff42 	bl	8006a04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f901 	bl	8005d8c <xTaskPriorityInherit>
 8004b8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b8c:	f001 ff6a 	bl	8006a64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	3324      	adds	r3, #36	; 0x24
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fec7 	bl	800592c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ba0:	f000 f985 	bl	8004eae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ba4:	f000 fcf6 	bl	8005594 <xTaskResumeAll>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f47f af68 	bne.w	8004a80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bb0:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <xQueueSemaphoreTake+0x214>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	e75e      	b.n	8004a80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bc4:	f000 f973 	bl	8004eae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc8:	f000 fce4 	bl	8005594 <xTaskResumeAll>
 8004bcc:	e758      	b.n	8004a80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bd0:	f000 f96d 	bl	8004eae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bd4:	f000 fcde 	bl	8005594 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bda:	f000 f9ba 	bl	8004f52 <prvIsQueueEmpty>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f43f af4d 	beq.w	8004a80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004bec:	f001 ff0a 	bl	8006a04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bf2:	f000 f8b4 	bl	8004d5e <prvGetDisinheritPriorityAfterTimeout>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f99a 	bl	8005f38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c04:	f001 ff2e 	bl	8006a64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3738      	adds	r7, #56	; 0x38
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08e      	sub	sp, #56	; 0x38
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	623b      	str	r3, [r7, #32]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <xQueueReceiveFromISR+0x3a>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueReceiveFromISR+0x3e>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueReceiveFromISR+0x40>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	61fb      	str	r3, [r7, #28]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c72:	f001 ffa9 	bl	8006bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8004c76:	f3ef 8211 	mrs	r2, BASEPRI
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	61ba      	str	r2, [r7, #24]
 8004c8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d02f      	beq.n	8004cfe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cac:	f000 f8d9 	bl	8004e62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d112      	bne.n	8004ce8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	3310      	adds	r3, #16
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fe7c 	bl	80059cc <xTaskRemoveFromEventList>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e007      	b.n	8004cf8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cec:	3301      	adds	r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	b25a      	sxtb	r2, r3
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfc:	e001      	b.n	8004d02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f383 8811 	msr	BASEPRI, r3
}
 8004d0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3738      	adds	r7, #56	; 0x38
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <vQueueDelete+0x28>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60bb      	str	r3, [r7, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f95f 	bl	8005004 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f001 ff8b 	bl	8006c6c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e001      	b.n	8004d80 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d80:	68fb      	ldr	r3, [r7, #12]
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d14d      	bne.n	8004e50 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f84f 	bl	8005e5c <xTaskPriorityDisinherit>
 8004dbe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	e043      	b.n	8004e50 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d119      	bne.n	8004e02 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6858      	ldr	r0, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	f002 fdc1 	bl	8007960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d32b      	bcc.n	8004e50 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e026      	b.n	8004e50 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68d8      	ldr	r0, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	f002 fda7 	bl	8007960 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	425b      	negs	r3, r3
 8004e1c:	441a      	add	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d207      	bcs.n	8004e3e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	425b      	negs	r3, r3
 8004e38:	441a      	add	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d105      	bne.n	8004e50 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d018      	beq.n	8004ea6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d303      	bcc.n	8004e96 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68d9      	ldr	r1, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6838      	ldr	r0, [r7, #0]
 8004ea2:	f002 fd5d 	bl	8007960 <memcpy>
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eb6:	f001 fda5 	bl	8006a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec2:	e011      	b.n	8004ee8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d012      	beq.n	8004ef2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3324      	adds	r3, #36	; 0x24
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fd7b 	bl	80059cc <xTaskRemoveFromEventList>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004edc:	f000 fe52 	bl	8005b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	dce9      	bgt.n	8004ec4 <prvUnlockQueue+0x16>
 8004ef0:	e000      	b.n	8004ef4 <prvUnlockQueue+0x46>
					break;
 8004ef2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	22ff      	movs	r2, #255	; 0xff
 8004ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004efc:	f001 fdb2 	bl	8006a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f00:	f001 fd80 	bl	8006a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0c:	e011      	b.n	8004f32 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d012      	beq.n	8004f3c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3310      	adds	r3, #16
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fd56 	bl	80059cc <xTaskRemoveFromEventList>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f26:	f000 fe2d 	bl	8005b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dce9      	bgt.n	8004f0e <prvUnlockQueue+0x60>
 8004f3a:	e000      	b.n	8004f3e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f3c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	22ff      	movs	r2, #255	; 0xff
 8004f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f46:	f001 fd8d 	bl	8006a64 <vPortExitCritical>
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f5a:	f001 fd53 	bl	8006a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f66:	2301      	movs	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e001      	b.n	8004f70 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f70:	f001 fd78 	bl	8006a64 <vPortExitCritical>

	return xReturn;
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f86:	f001 fd3d 	bl	8006a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d102      	bne.n	8004f9c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e001      	b.n	8004fa0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa0:	f001 fd60 	bl	8006a64 <vPortExitCritical>

	return xReturn;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e014      	b.n	8004fea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fc0:	4a0f      	ldr	r2, [pc, #60]	; (8005000 <vQueueAddToRegistry+0x50>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fcc:	490c      	ldr	r1, [pc, #48]	; (8005000 <vQueueAddToRegistry+0x50>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fd6:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <vQueueAddToRegistry+0x50>)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fe2:	e006      	b.n	8004ff2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b07      	cmp	r3, #7
 8004fee:	d9e7      	bls.n	8004fc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000fc8 	.word	0x20000fc8

08005004 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e016      	b.n	8005040 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005012:	4a10      	ldr	r2, [pc, #64]	; (8005054 <vQueueUnregisterQueue+0x50>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d10b      	bne.n	800503a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005022:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <vQueueUnregisterQueue+0x50>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2100      	movs	r1, #0
 8005028:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800502c:	4a09      	ldr	r2, [pc, #36]	; (8005054 <vQueueUnregisterQueue+0x50>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	605a      	str	r2, [r3, #4]
				break;
 8005038:	e006      	b.n	8005048 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b07      	cmp	r3, #7
 8005044:	d9e5      	bls.n	8005012 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20000fc8 	.word	0x20000fc8

08005058 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005068:	f001 fccc 	bl	8006a04 <vPortEnterCritical>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005072:	b25b      	sxtb	r3, r3
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d103      	bne.n	8005082 <vQueueWaitForMessageRestricted+0x2a>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005088:	b25b      	sxtb	r3, r3
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d103      	bne.n	8005098 <vQueueWaitForMessageRestricted+0x40>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005098:	f001 fce4 	bl	8006a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3324      	adds	r3, #36	; 0x24
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fc61 	bl	8005974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050b2:	6978      	ldr	r0, [r7, #20]
 80050b4:	f7ff fefb 	bl	8004eae <prvUnlockQueue>
	}
 80050b8:	bf00      	nop
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	; 0x38
 80050c4:	af04      	add	r7, sp, #16
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xTaskCreateStatic+0x46>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61fb      	str	r3, [r7, #28]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005106:	23bc      	movs	r3, #188	; 0xbc
 8005108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2bbc      	cmp	r3, #188	; 0xbc
 800510e:	d00a      	beq.n	8005126 <xTaskCreateStatic+0x66>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61bb      	str	r3, [r7, #24]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005126:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01e      	beq.n	800516c <xTaskCreateStatic+0xac>
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01b      	beq.n	800516c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800513c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	2202      	movs	r2, #2
 8005142:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005146:	2300      	movs	r3, #0
 8005148:	9303      	str	r3, [sp, #12]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	9302      	str	r3, [sp, #8]
 800514e:	f107 0314 	add.w	r3, r7, #20
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f850 	bl	8005204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005166:	f000 f8f3 	bl	8005350 <prvAddNewTaskToReadyList>
 800516a:	e001      	b.n	8005170 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005170:	697b      	ldr	r3, [r7, #20]
	}
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	; 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800517a:	b580      	push	{r7, lr}
 800517c:	b08c      	sub	sp, #48	; 0x30
 800517e:	af04      	add	r7, sp, #16
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4618      	mov	r0, r3
 8005190:	f001 fd5a 	bl	8006c48 <pvPortMalloc>
 8005194:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800519c:	20bc      	movs	r0, #188	; 0xbc
 800519e:	f001 fd53 	bl	8006c48 <pvPortMalloc>
 80051a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
 80051b0:	e005      	b.n	80051be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b2:	6978      	ldr	r0, [r7, #20]
 80051b4:	f001 fd5a 	bl	8006c6c <vPortFree>
 80051b8:	e001      	b.n	80051be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d017      	beq.n	80051f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	9302      	str	r3, [sp, #8]
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f80e 	bl	8005204 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e8:	69f8      	ldr	r0, [r7, #28]
 80051ea:	f000 f8b1 	bl	8005350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e002      	b.n	80051fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051fa:	69bb      	ldr	r3, [r7, #24]
	}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	461a      	mov	r2, r3
 800521c:	21a5      	movs	r1, #165	; 0xa5
 800521e:	f002 fbad 	bl	800797c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800522c:	3b01      	subs	r3, #1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	617b      	str	r3, [r7, #20]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01f      	beq.n	80052a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e012      	b.n	800528e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	7819      	ldrb	r1, [r3, #0]
 8005270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	3334      	adds	r3, #52	; 0x34
 8005278:	460a      	mov	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b0f      	cmp	r3, #15
 8005292:	d9e9      	bls.n	8005268 <prvInitialiseNewTask+0x64>
 8005294:	e000      	b.n	8005298 <prvInitialiseNewTask+0x94>
			{
				break;
 8005296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a0:	e003      	b.n	80052aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	2b37      	cmp	r3, #55	; 0x37
 80052ae:	d901      	bls.n	80052b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b0:	2337      	movs	r3, #55	; 0x37
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fe56 	bl	8003f7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	3318      	adds	r3, #24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fe51 	bl	8003f7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	2260      	movs	r2, #96	; 0x60
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f002 fb37 	bl	800797c <memset>
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <prvInitialiseNewTask+0x140>)
 8005312:	659a      	str	r2, [r3, #88]	; 0x58
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <prvInitialiseNewTask+0x144>)
 8005318:	65da      	str	r2, [r3, #92]	; 0x5c
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	4a0b      	ldr	r2, [pc, #44]	; (800534c <prvInitialiseNewTask+0x148>)
 800531e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	69b8      	ldr	r0, [r7, #24]
 8005326:	f001 fa3f 	bl	80067a8 <pxPortInitialiseStack>
 800532a:	4602      	mov	r2, r0
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533c:	bf00      	nop
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	08008694 	.word	0x08008694
 8005348:	080086b4 	.word	0x080086b4
 800534c:	08008674 	.word	0x08008674

08005350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005358:	f001 fb54 	bl	8006a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <prvAddNewTaskToReadyList+0xc4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a2c      	ldr	r2, [pc, #176]	; (8005414 <prvAddNewTaskToReadyList+0xc4>)
 8005364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005366:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536e:	4a2a      	ldr	r2, [pc, #168]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <prvAddNewTaskToReadyList+0xc4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d110      	bne.n	800539e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800537c:	f000 fc26 	bl	8005bcc <prvInitialiseTaskLists>
 8005380:	e00d      	b.n	800539e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005382:	4b26      	ldr	r3, [pc, #152]	; (800541c <prvAddNewTaskToReadyList+0xcc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d802      	bhi.n	800539e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539e:	4b20      	ldr	r3, [pc, #128]	; (8005420 <prvAddNewTaskToReadyList+0xd0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <prvAddNewTaskToReadyList+0xd0>)
 80053a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <prvAddNewTaskToReadyList+0xd0>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <prvAddNewTaskToReadyList+0xd4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d903      	bls.n	80053c4 <prvAddNewTaskToReadyList+0x74>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a18      	ldr	r2, [pc, #96]	; (8005424 <prvAddNewTaskToReadyList+0xd4>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <prvAddNewTaskToReadyList+0xd8>)
 80053d2:	441a      	add	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4619      	mov	r1, r3
 80053da:	4610      	mov	r0, r2
 80053dc:	f7fe fddb 	bl	8003f96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053e0:	f001 fb40 	bl	8006a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <prvAddNewTaskToReadyList+0xcc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00e      	beq.n	800540a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d207      	bcs.n	800540a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <prvAddNewTaskToReadyList+0xdc>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000ce4 	.word	0x20000ce4
 8005418:	20000810 	.word	0x20000810
 800541c:	20000cf0 	.word	0x20000cf0
 8005420:	20000d00 	.word	0x20000d00
 8005424:	20000cec 	.word	0x20000cec
 8005428:	20000814 	.word	0x20000814
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005442:	4b13      	ldr	r3, [pc, #76]	; (8005490 <vTaskDelay+0x60>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <vTaskDelay+0x30>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	60bb      	str	r3, [r7, #8]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005460:	f000 f88a 	bl	8005578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005464:	2100      	movs	r1, #0
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fdfc 	bl	8006064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800546c:	f000 f892 	bl	8005594 <xTaskResumeAll>
 8005470:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <vTaskDelay+0x64>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000d0c 	.word	0x20000d0c
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054a6:	463a      	mov	r2, r7
 80054a8:	1d39      	adds	r1, r7, #4
 80054aa:	f107 0308 	add.w	r3, r7, #8
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fd10 	bl	8003ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	9202      	str	r2, [sp, #8]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	2300      	movs	r3, #0
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	460a      	mov	r2, r1
 80054c6:	4924      	ldr	r1, [pc, #144]	; (8005558 <vTaskStartScheduler+0xc0>)
 80054c8:	4824      	ldr	r0, [pc, #144]	; (800555c <vTaskStartScheduler+0xc4>)
 80054ca:	f7ff fdf9 	bl	80050c0 <xTaskCreateStatic>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <vTaskStartScheduler+0xc8>)
 80054d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <vTaskStartScheduler+0xc8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054dc:	2301      	movs	r3, #1
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e001      	b.n	80054e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d102      	bne.n	80054f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054ec:	f000 fe0e 	bl	800610c <xTimerCreateTimerTask>
 80054f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d11b      	bne.n	8005530 <vTaskStartScheduler+0x98>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	613b      	str	r3, [r7, #16]
}
 800550a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800550c:	4b15      	ldr	r3, [pc, #84]	; (8005564 <vTaskStartScheduler+0xcc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3354      	adds	r3, #84	; 0x54
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <vTaskStartScheduler+0xd0>)
 8005514:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005516:	4b15      	ldr	r3, [pc, #84]	; (800556c <vTaskStartScheduler+0xd4>)
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <vTaskStartScheduler+0xd8>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <vTaskStartScheduler+0xdc>)
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800552a:	f001 f9c9 	bl	80068c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800552e:	e00e      	b.n	800554e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d10a      	bne.n	800554e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	60fb      	str	r3, [r7, #12]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <vTaskStartScheduler+0xb4>
}
 800554e:	bf00      	nop
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	080082cc 	.word	0x080082cc
 800555c:	08005b9d 	.word	0x08005b9d
 8005560:	20000d08 	.word	0x20000d08
 8005564:	20000810 	.word	0x20000810
 8005568:	20000010 	.word	0x20000010
 800556c:	20000d04 	.word	0x20000d04
 8005570:	20000cf0 	.word	0x20000cf0
 8005574:	20000ce8 	.word	0x20000ce8

08005578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <vTaskSuspendAll+0x18>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a03      	ldr	r2, [pc, #12]	; (8005590 <vTaskSuspendAll+0x18>)
 8005584:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000d0c 	.word	0x20000d0c

08005594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055a2:	4b42      	ldr	r3, [pc, #264]	; (80056ac <xTaskResumeAll+0x118>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055c0:	f001 fa20 	bl	8006a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <xTaskResumeAll+0x118>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	4a38      	ldr	r2, [pc, #224]	; (80056ac <xTaskResumeAll+0x118>)
 80055cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <xTaskResumeAll+0x118>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d162      	bne.n	800569c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <xTaskResumeAll+0x11c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d05e      	beq.n	800569c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055de:	e02f      	b.n	8005640 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e0:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <xTaskResumeAll+0x120>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3318      	adds	r3, #24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe fd2f 	bl	8004050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fd2a 	bl	8004050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	4b2d      	ldr	r3, [pc, #180]	; (80056b8 <xTaskResumeAll+0x124>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <xTaskResumeAll+0x7c>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a2a      	ldr	r2, [pc, #168]	; (80056b8 <xTaskResumeAll+0x124>)
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <xTaskResumeAll+0x128>)
 800561e:	441a      	add	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fe fcb5 	bl	8003f96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <xTaskResumeAll+0x12c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <xTaskResumeAll+0x130>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005640:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <xTaskResumeAll+0x120>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1cb      	bne.n	80055e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800564e:	f000 fb5f 	bl	8005d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <xTaskResumeAll+0x134>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d010      	beq.n	8005680 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800565e:	f000 f847 	bl	80056f0 <xTaskIncrementTick>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005668:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <xTaskResumeAll+0x130>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3b01      	subs	r3, #1
 8005672:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f1      	bne.n	800565e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <xTaskResumeAll+0x134>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <xTaskResumeAll+0x130>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <xTaskResumeAll+0x138>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800569c:	f001 f9e2 	bl	8006a64 <vPortExitCritical>

	return xAlreadyYielded;
 80056a0:	68bb      	ldr	r3, [r7, #8]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000d0c 	.word	0x20000d0c
 80056b0:	20000ce4 	.word	0x20000ce4
 80056b4:	20000ca4 	.word	0x20000ca4
 80056b8:	20000cec 	.word	0x20000cec
 80056bc:	20000814 	.word	0x20000814
 80056c0:	20000810 	.word	0x20000810
 80056c4:	20000cf8 	.word	0x20000cf8
 80056c8:	20000cf4 	.word	0x20000cf4
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <xTaskGetTickCount+0x1c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056dc:	687b      	ldr	r3, [r7, #4]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000ce8 	.word	0x20000ce8

080056f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056fa:	4b4f      	ldr	r3, [pc, #316]	; (8005838 <xTaskIncrementTick+0x148>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f040 808f 	bne.w	8005822 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005704:	4b4d      	ldr	r3, [pc, #308]	; (800583c <xTaskIncrementTick+0x14c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800570c:	4a4b      	ldr	r2, [pc, #300]	; (800583c <xTaskIncrementTick+0x14c>)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d120      	bne.n	800575a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005718:	4b49      	ldr	r3, [pc, #292]	; (8005840 <xTaskIncrementTick+0x150>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <xTaskIncrementTick+0x48>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	603b      	str	r3, [r7, #0]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xTaskIncrementTick+0x46>
 8005738:	4b41      	ldr	r3, [pc, #260]	; (8005840 <xTaskIncrementTick+0x150>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	4b41      	ldr	r3, [pc, #260]	; (8005844 <xTaskIncrementTick+0x154>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a3f      	ldr	r2, [pc, #252]	; (8005840 <xTaskIncrementTick+0x150>)
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4a3f      	ldr	r2, [pc, #252]	; (8005844 <xTaskIncrementTick+0x154>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b3e      	ldr	r3, [pc, #248]	; (8005848 <xTaskIncrementTick+0x158>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	4a3d      	ldr	r2, [pc, #244]	; (8005848 <xTaskIncrementTick+0x158>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	f000 fadb 	bl	8005d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800575a:	4b3c      	ldr	r3, [pc, #240]	; (800584c <xTaskIncrementTick+0x15c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d349      	bcc.n	80057f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005764:	4b36      	ldr	r3, [pc, #216]	; (8005840 <xTaskIncrementTick+0x150>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576e:	4b37      	ldr	r3, [pc, #220]	; (800584c <xTaskIncrementTick+0x15c>)
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	601a      	str	r2, [r3, #0]
					break;
 8005776:	e03f      	b.n	80057f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005778:	4b31      	ldr	r3, [pc, #196]	; (8005840 <xTaskIncrementTick+0x150>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d203      	bcs.n	8005798 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005790:	4a2e      	ldr	r2, [pc, #184]	; (800584c <xTaskIncrementTick+0x15c>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005796:	e02f      	b.n	80057f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fc57 	bl	8004050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	3318      	adds	r3, #24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fc4e 	bl	8004050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <xTaskIncrementTick+0x160>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d903      	bls.n	80057c8 <xTaskIncrementTick+0xd8>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a22      	ldr	r2, [pc, #136]	; (8005850 <xTaskIncrementTick+0x160>)
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <xTaskIncrementTick+0x164>)
 80057d6:	441a      	add	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7fe fbd9 	bl	8003f96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <xTaskIncrementTick+0x168>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3b8      	bcc.n	8005764 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057f2:	2301      	movs	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f6:	e7b5      	b.n	8005764 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <xTaskIncrementTick+0x168>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	4915      	ldr	r1, [pc, #84]	; (8005854 <xTaskIncrementTick+0x164>)
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d901      	bls.n	8005814 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005814:	4b11      	ldr	r3, [pc, #68]	; (800585c <xTaskIncrementTick+0x16c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800581c:	2301      	movs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e004      	b.n	800582c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <xTaskIncrementTick+0x170>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <xTaskIncrementTick+0x170>)
 800582a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800582c:	697b      	ldr	r3, [r7, #20]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000d0c 	.word	0x20000d0c
 800583c:	20000ce8 	.word	0x20000ce8
 8005840:	20000c9c 	.word	0x20000c9c
 8005844:	20000ca0 	.word	0x20000ca0
 8005848:	20000cfc 	.word	0x20000cfc
 800584c:	20000d04 	.word	0x20000d04
 8005850:	20000cec 	.word	0x20000cec
 8005854:	20000814 	.word	0x20000814
 8005858:	20000810 	.word	0x20000810
 800585c:	20000cf8 	.word	0x20000cf8
 8005860:	20000cf4 	.word	0x20000cf4

08005864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800586a:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <vTaskSwitchContext+0xb0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <vTaskSwitchContext+0xb4>)
 8005874:	2201      	movs	r2, #1
 8005876:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005878:	e046      	b.n	8005908 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800587a:	4b27      	ldr	r3, [pc, #156]	; (8005918 <vTaskSwitchContext+0xb4>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005880:	4b26      	ldr	r3, [pc, #152]	; (800591c <vTaskSwitchContext+0xb8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e010      	b.n	80058aa <vTaskSwitchContext+0x46>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	607b      	str	r3, [r7, #4]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vTaskSwitchContext+0x3e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	491d      	ldr	r1, [pc, #116]	; (8005920 <vTaskSwitchContext+0xbc>)
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0e4      	beq.n	8005888 <vTaskSwitchContext+0x24>
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a15      	ldr	r2, [pc, #84]	; (8005920 <vTaskSwitchContext+0xbc>)
 80058ca:	4413      	add	r3, r2
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	3308      	adds	r3, #8
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d104      	bne.n	80058ee <vTaskSwitchContext+0x8a>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <vTaskSwitchContext+0xc0>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4a08      	ldr	r2, [pc, #32]	; (800591c <vTaskSwitchContext+0xb8>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <vTaskSwitchContext+0xc0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3354      	adds	r3, #84	; 0x54
 8005904:	4a08      	ldr	r2, [pc, #32]	; (8005928 <vTaskSwitchContext+0xc4>)
 8005906:	6013      	str	r3, [r2, #0]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000d0c 	.word	0x20000d0c
 8005918:	20000cf8 	.word	0x20000cf8
 800591c:	20000cec 	.word	0x20000cec
 8005920:	20000814 	.word	0x20000814
 8005924:	20000810 	.word	0x20000810
 8005928:	20000010 	.word	0x20000010

0800592c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60fb      	str	r3, [r7, #12]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <vTaskPlaceOnEventList+0x44>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3318      	adds	r3, #24
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fe fb3f 	bl	8003fde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005960:	2101      	movs	r1, #1
 8005962:	6838      	ldr	r0, [r7, #0]
 8005964:	f000 fb7e 	bl	8006064 <prvAddCurrentTaskToDelayedList>
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000810 	.word	0x20000810

08005974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	617b      	str	r3, [r7, #20]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3318      	adds	r3, #24
 80059a2:	4619      	mov	r1, r3
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7fe faf6 	bl	8003f96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	68b8      	ldr	r0, [r7, #8]
 80059ba:	f000 fb53 	bl	8006064 <prvAddCurrentTaskToDelayedList>
	}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000810 	.word	0x20000810

080059cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3318      	adds	r3, #24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fe fb27 	bl	8004050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a02:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <xTaskRemoveFromEventList+0xb0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11d      	bne.n	8005a46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fb1e 	bl	8004050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <xTaskRemoveFromEventList+0xb4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d903      	bls.n	8005a28 <xTaskRemoveFromEventList+0x5c>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <xTaskRemoveFromEventList+0xb4>)
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <xTaskRemoveFromEventList+0xb8>)
 8005a36:	441a      	add	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7fe faa9 	bl	8003f96 <vListInsertEnd>
 8005a44:	e005      	b.n	8005a52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	3318      	adds	r3, #24
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	480e      	ldr	r0, [pc, #56]	; (8005a88 <xTaskRemoveFromEventList+0xbc>)
 8005a4e:	f7fe faa2 	bl	8003f96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <xTaskRemoveFromEventList+0xc0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d905      	bls.n	8005a6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <xTaskRemoveFromEventList+0xc4>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e001      	b.n	8005a70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a70:	697b      	ldr	r3, [r7, #20]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000d0c 	.word	0x20000d0c
 8005a80:	20000cec 	.word	0x20000cec
 8005a84:	20000814 	.word	0x20000814
 8005a88:	20000ca4 	.word	0x20000ca4
 8005a8c:	20000810 	.word	0x20000810
 8005a90:	20000cf8 	.word	0x20000cf8

08005a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <vTaskInternalSetTimeOutState+0x24>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <vTaskInternalSetTimeOutState+0x28>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	605a      	str	r2, [r3, #4]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20000cfc 	.word	0x20000cfc
 8005abc:	20000ce8 	.word	0x20000ce8

08005ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	60fb      	str	r3, [r7, #12]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b02:	f000 ff7f 	bl	8006a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b06:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <xTaskCheckForTimeOut+0xbc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1e:	d102      	bne.n	8005b26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	e023      	b.n	8005b6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <xTaskCheckForTimeOut+0xc0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d007      	beq.n	8005b42 <xTaskCheckForTimeOut+0x82>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d302      	bcc.n	8005b42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e015      	b.n	8005b6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d20b      	bcs.n	8005b64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	1ad2      	subs	r2, r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ff9b 	bl	8005a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	e004      	b.n	8005b6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b6e:	f000 ff79 	bl	8006a64 <vPortExitCritical>

	return xReturn;
 8005b72:	69fb      	ldr	r3, [r7, #28]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3720      	adds	r7, #32
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000ce8 	.word	0x20000ce8
 8005b80:	20000cfc 	.word	0x20000cfc

08005b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <vTaskMissedYield+0x14>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
}
 8005b8e:	bf00      	nop
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000cf8 	.word	0x20000cf8

08005b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba4:	f000 f852 	bl	8005c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <prvIdleTask+0x28>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d9f9      	bls.n	8005ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <prvIdleTask+0x2c>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bc0:	e7f0      	b.n	8005ba4 <prvIdleTask+0x8>
 8005bc2:	bf00      	nop
 8005bc4:	20000814 	.word	0x20000814
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	e00c      	b.n	8005bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <prvInitialiseTaskLists+0x60>)
 8005be4:	4413      	add	r3, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe f9a8 	bl	8003f3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b37      	cmp	r3, #55	; 0x37
 8005bf6:	d9ef      	bls.n	8005bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf8:	480d      	ldr	r0, [pc, #52]	; (8005c30 <prvInitialiseTaskLists+0x64>)
 8005bfa:	f7fe f99f 	bl	8003f3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bfe:	480d      	ldr	r0, [pc, #52]	; (8005c34 <prvInitialiseTaskLists+0x68>)
 8005c00:	f7fe f99c 	bl	8003f3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c04:	480c      	ldr	r0, [pc, #48]	; (8005c38 <prvInitialiseTaskLists+0x6c>)
 8005c06:	f7fe f999 	bl	8003f3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c0a:	480c      	ldr	r0, [pc, #48]	; (8005c3c <prvInitialiseTaskLists+0x70>)
 8005c0c:	f7fe f996 	bl	8003f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c10:	480b      	ldr	r0, [pc, #44]	; (8005c40 <prvInitialiseTaskLists+0x74>)
 8005c12:	f7fe f993 	bl	8003f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <prvInitialiseTaskLists+0x78>)
 8005c18:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <prvInitialiseTaskLists+0x64>)
 8005c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <prvInitialiseTaskLists+0x7c>)
 8005c1e:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <prvInitialiseTaskLists+0x68>)
 8005c20:	601a      	str	r2, [r3, #0]
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000814 	.word	0x20000814
 8005c30:	20000c74 	.word	0x20000c74
 8005c34:	20000c88 	.word	0x20000c88
 8005c38:	20000ca4 	.word	0x20000ca4
 8005c3c:	20000cb8 	.word	0x20000cb8
 8005c40:	20000cd0 	.word	0x20000cd0
 8005c44:	20000c9c 	.word	0x20000c9c
 8005c48:	20000ca0 	.word	0x20000ca0

08005c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c52:	e019      	b.n	8005c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c54:	f000 fed6 	bl	8006a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <prvCheckTasksWaitingTermination+0x50>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe f9f3 	bl	8004050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <prvCheckTasksWaitingTermination+0x54>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <prvCheckTasksWaitingTermination+0x54>)
 8005c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <prvCheckTasksWaitingTermination+0x58>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <prvCheckTasksWaitingTermination+0x58>)
 8005c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c7e:	f000 fef1 	bl	8006a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f810 	bl	8005ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <prvCheckTasksWaitingTermination+0x58>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e1      	bne.n	8005c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000cb8 	.word	0x20000cb8
 8005ca0:	20000ce4 	.word	0x20000ce4
 8005ca4:	20000ccc 	.word	0x20000ccc

08005ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3354      	adds	r3, #84	; 0x54
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 ff21 	bl	8007afc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d108      	bne.n	8005cd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 ffcf 	bl	8006c6c <vPortFree>
				vPortFree( pxTCB );
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 ffcc 	bl	8006c6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cd4:	e018      	b.n	8005d08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d103      	bne.n	8005ce8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 ffc3 	bl	8006c6c <vPortFree>
	}
 8005ce6:	e00f      	b.n	8005d08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d00a      	beq.n	8005d08 <prvDeleteTCB+0x60>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60fb      	str	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <prvDeleteTCB+0x5e>
	}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvResetNextTaskUnblockTime+0x38>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <prvResetNextTaskUnblockTime+0x3c>)
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d28:	e008      	b.n	8005d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <prvResetNextTaskUnblockTime+0x38>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <prvResetNextTaskUnblockTime+0x3c>)
 8005d3a:	6013      	str	r3, [r2, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000c9c 	.word	0x20000c9c
 8005d4c:	20000d04 	.word	0x20000d04

08005d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <xTaskGetSchedulerState+0x34>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	e008      	b.n	8005d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <xTaskGetSchedulerState+0x38>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	e001      	b.n	8005d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d76:	687b      	ldr	r3, [r7, #4]
	}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	20000cf0 	.word	0x20000cf0
 8005d88:	20000d0c 	.word	0x20000d0c

08005d8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d051      	beq.n	8005e46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da6:	4b2a      	ldr	r3, [pc, #168]	; (8005e50 <xTaskPriorityInherit+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d241      	bcs.n	8005e34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db06      	blt.n	8005dc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <xTaskPriorityInherit+0xc4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6959      	ldr	r1, [r3, #20]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <xTaskPriorityInherit+0xc8>)
 8005dd8:	4413      	add	r3, r2
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	d122      	bne.n	8005e24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe f934 	bl	8004050 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005de8:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <xTaskPriorityInherit+0xc4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <xTaskPriorityInherit+0xcc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d903      	bls.n	8005e06 <xTaskPriorityInherit+0x7a>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <xTaskPriorityInherit+0xcc>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <xTaskPriorityInherit+0xc8>)
 8005e14:	441a      	add	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f7fe f8ba 	bl	8003f96 <vListInsertEnd>
 8005e22:	e004      	b.n	8005e2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <xTaskPriorityInherit+0xc4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e008      	b.n	8005e46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <xTaskPriorityInherit+0xc4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d201      	bcs.n	8005e46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e42:	2301      	movs	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e46:	68fb      	ldr	r3, [r7, #12]
	}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000810 	.word	0x20000810
 8005e54:	20000814 	.word	0x20000814
 8005e58:	20000cec 	.word	0x20000cec

08005e5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d056      	beq.n	8005f20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e72:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <xTaskPriorityDisinherit+0xd0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d00a      	beq.n	8005e92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60fb      	str	r3, [r7, #12]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60bb      	str	r3, [r7, #8]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d02c      	beq.n	8005f20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d128      	bne.n	8005f20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe f8bc 	bl	8004050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <xTaskPriorityDisinherit+0xd4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <xTaskPriorityDisinherit+0xa4>
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <xTaskPriorityDisinherit+0xd4>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <xTaskPriorityDisinherit+0xd8>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe f83d 	bl	8003f96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f20:	697b      	ldr	r3, [r7, #20]
	}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000810 	.word	0x20000810
 8005f30:	20000cec 	.word	0x20000cec
 8005f34:	20000814 	.word	0x20000814

08005f38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f46:	2301      	movs	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d06a      	beq.n	8006026 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d902      	bls.n	8005f7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	e002      	b.n	8005f84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d04b      	beq.n	8006026 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d146      	bne.n	8006026 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d10a      	bne.n	8005fb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	60bb      	str	r3, [r7, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	db04      	blt.n	8005fd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	6959      	ldr	r1, [r3, #20]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	4299      	cmp	r1, r3
 8005fea:	d11c      	bne.n	8006026 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe f82d 	bl	8004050 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d903      	bls.n	800600a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	4a0c      	ldr	r2, [pc, #48]	; (8006038 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a07      	ldr	r2, [pc, #28]	; (8006034 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006018:	441a      	add	r2, r3
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3304      	adds	r3, #4
 800601e:	4619      	mov	r1, r3
 8006020:	4610      	mov	r0, r2
 8006022:	f7fd ffb8 	bl	8003f96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006026:	bf00      	nop
 8006028:	3720      	adds	r7, #32
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000810 	.word	0x20000810
 8006034:	20000814 	.word	0x20000814
 8006038:	20000cec 	.word	0x20000cec

0800603c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <pvTaskIncrementMutexHeldCount+0x24>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <pvTaskIncrementMutexHeldCount+0x24>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800604e:	3201      	adds	r2, #1
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006052:	4b03      	ldr	r3, [pc, #12]	; (8006060 <pvTaskIncrementMutexHeldCount+0x24>)
 8006054:	681b      	ldr	r3, [r3, #0]
	}
 8006056:	4618      	mov	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	20000810 	.word	0x20000810

08006064 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800606e:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006074:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd ffe8 	bl	8004050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d10a      	bne.n	800609e <prvAddCurrentTaskToDelayedList+0x3a>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4819      	ldr	r0, [pc, #100]	; (80060fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006098:	f7fd ff7d 	bl	8003f96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800609c:	e026      	b.n	80060ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d209      	bcs.n	80060ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fd ff8b 	bl	8003fde <vListInsert>
}
 80060c8:	e010      	b.n	80060ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fd ff81 	bl	8003fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d202      	bcs.n	80060ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060e6:	4a08      	ldr	r2, [pc, #32]	; (8006108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6013      	str	r3, [r2, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000ce8 	.word	0x20000ce8
 80060f8:	20000810 	.word	0x20000810
 80060fc:	20000cd0 	.word	0x20000cd0
 8006100:	20000ca0 	.word	0x20000ca0
 8006104:	20000c9c 	.word	0x20000c9c
 8006108:	20000d04 	.word	0x20000d04

0800610c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006116:	f000 fb07 	bl	8006728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800611a:	4b1c      	ldr	r3, [pc, #112]	; (800618c <xTimerCreateTimerTask+0x80>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d021      	beq.n	8006166 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800612a:	1d3a      	adds	r2, r7, #4
 800612c:	f107 0108 	add.w	r1, r7, #8
 8006130:	f107 030c 	add.w	r3, r7, #12
 8006134:	4618      	mov	r0, r3
 8006136:	f7fd fee7 	bl	8003f08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	9202      	str	r2, [sp, #8]
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	2302      	movs	r3, #2
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	2300      	movs	r3, #0
 800614a:	460a      	mov	r2, r1
 800614c:	4910      	ldr	r1, [pc, #64]	; (8006190 <xTimerCreateTimerTask+0x84>)
 800614e:	4811      	ldr	r0, [pc, #68]	; (8006194 <xTimerCreateTimerTask+0x88>)
 8006150:	f7fe ffb6 	bl	80050c0 <xTaskCreateStatic>
 8006154:	4603      	mov	r3, r0
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <xTimerCreateTimerTask+0x8c>)
 8006158:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800615a:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <xTimerCreateTimerTask+0x8c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006162:	2301      	movs	r3, #1
 8006164:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	613b      	str	r3, [r7, #16]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006182:	697b      	ldr	r3, [r7, #20]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000d40 	.word	0x20000d40
 8006190:	080082d4 	.word	0x080082d4
 8006194:	080062d1 	.word	0x080062d1
 8006198:	20000d44 	.word	0x20000d44

0800619c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	; 0x28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061ca:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <xTimerGenericCommand+0x98>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02a      	beq.n	8006228 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	dc18      	bgt.n	8006216 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061e4:	f7ff fdb4 	bl	8005d50 <xTaskGetSchedulerState>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d109      	bne.n	8006202 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <xTimerGenericCommand+0x98>)
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f107 0110 	add.w	r1, r7, #16
 80061f6:	2300      	movs	r3, #0
 80061f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fa:	f7fe f8fb 	bl	80043f4 <xQueueGenericSend>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006200:	e012      	b.n	8006228 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <xTimerGenericCommand+0x98>)
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	f107 0110 	add.w	r1, r7, #16
 800620a:	2300      	movs	r3, #0
 800620c:	2200      	movs	r2, #0
 800620e:	f7fe f8f1 	bl	80043f4 <xQueueGenericSend>
 8006212:	6278      	str	r0, [r7, #36]	; 0x24
 8006214:	e008      	b.n	8006228 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <xTimerGenericCommand+0x98>)
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f107 0110 	add.w	r1, r7, #16
 800621e:	2300      	movs	r3, #0
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	f7fe f9e5 	bl	80045f0 <xQueueGenericSendFromISR>
 8006226:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800622a:	4618      	mov	r0, r3
 800622c:	3728      	adds	r7, #40	; 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000d40 	.word	0x20000d40

08006238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006242:	4b22      	ldr	r3, [pc, #136]	; (80062cc <prvProcessExpiredTimer+0x94>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fd fefd 	bl	8004050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d022      	beq.n	80062aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	18d1      	adds	r1, r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f000 f8d1 	bl	8006418 <prvInsertTimerInActiveList>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01f      	beq.n	80062bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7ff ff88 	bl	800619c <xTimerGenericCommand>
 800628c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d113      	bne.n	80062bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60fb      	str	r3, [r7, #12]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	6978      	ldr	r0, [r7, #20]
 80062c2:	4798      	blx	r3
}
 80062c4:	bf00      	nop
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000d38 	.word	0x20000d38

080062d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f857 	bl	8006390 <prvGetNextExpireTime>
 80062e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4619      	mov	r1, r3
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f803 	bl	80062f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062ee:	f000 f8d5 	bl	800649c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f2:	e7f1      	b.n	80062d8 <prvTimerTask+0x8>

080062f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062fe:	f7ff f93b 	bl	8005578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f866 	bl	80063d8 <prvSampleTimeNow>
 800630c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d130      	bne.n	8006376 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <prvProcessTimerOrBlockTask+0x3c>
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	429a      	cmp	r2, r3
 8006320:	d806      	bhi.n	8006330 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006322:	f7ff f937 	bl	8005594 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff85 	bl	8006238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800632e:	e024      	b.n	800637a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <prvProcessTimerOrBlockTask+0x90>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <prvProcessTimerOrBlockTask+0x50>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <prvProcessTimerOrBlockTask+0x52>
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <prvProcessTimerOrBlockTask+0x94>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4619      	mov	r1, r3
 8006356:	f7fe fe7f 	bl	8005058 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800635a:	f7ff f91b 	bl	8005594 <xTaskResumeAll>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <prvProcessTimerOrBlockTask+0x98>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
}
 8006374:	e001      	b.n	800637a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006376:	f7ff f90d 	bl	8005594 <xTaskResumeAll>
}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000d3c 	.word	0x20000d3c
 8006388:	20000d40 	.word	0x20000d40
 800638c:	e000ed04 	.word	0xe000ed04

08006390 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006398:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <prvGetNextExpireTime+0x44>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <prvGetNextExpireTime+0x16>
 80063a2:	2201      	movs	r2, #1
 80063a4:	e000      	b.n	80063a8 <prvGetNextExpireTime+0x18>
 80063a6:	2200      	movs	r2, #0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <prvGetNextExpireTime+0x44>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	e001      	b.n	80063c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063c4:	68fb      	ldr	r3, [r7, #12]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000d38 	.word	0x20000d38

080063d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063e0:	f7ff f976 	bl	80056d0 <xTaskGetTickCount>
 80063e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <prvSampleTimeNow+0x3c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d205      	bcs.n	80063fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063f0:	f000 f936 	bl	8006660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e002      	b.n	8006402 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006402:	4a04      	ldr	r2, [pc, #16]	; (8006414 <prvSampleTimeNow+0x3c>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006408:	68fb      	ldr	r3, [r7, #12]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000d48 	.word	0x20000d48

08006418 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	d812      	bhi.n	8006464 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	1ad2      	subs	r2, r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e01b      	b.n	800648a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <prvInsertTimerInActiveList+0x7c>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3304      	adds	r3, #4
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fd fdbe 	bl	8003fde <vListInsert>
 8006462:	e012      	b.n	800648a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d206      	bcs.n	800647a <prvInsertTimerInActiveList+0x62>
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e007      	b.n	800648a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <prvInsertTimerInActiveList+0x80>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3304      	adds	r3, #4
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7fd fdaa 	bl	8003fde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800648a:	697b      	ldr	r3, [r7, #20]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000d3c 	.word	0x20000d3c
 8006498:	20000d38 	.word	0x20000d38

0800649c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	; 0x38
 80064a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064a2:	e0ca      	b.n	800663a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da18      	bge.n	80064dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	3304      	adds	r3, #4
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61fb      	str	r3, [r7, #28]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d2:	6850      	ldr	r0, [r2, #4]
 80064d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d6:	6892      	ldr	r2, [r2, #8]
 80064d8:	4611      	mov	r1, r2
 80064da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f2c0 80aa 	blt.w	8006638 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	3304      	adds	r3, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fd fdab 	bl	8004050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064fa:	463b      	mov	r3, r7
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff ff6b 	bl	80063d8 <prvSampleTimeNow>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b09      	cmp	r3, #9
 8006508:	f200 8097 	bhi.w	800663a <prvProcessReceivedCommands+0x19e>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <prvProcessReceivedCommands+0x78>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	0800653d 	.word	0x0800653d
 8006518:	0800653d 	.word	0x0800653d
 800651c:	0800653d 	.word	0x0800653d
 8006520:	080065b1 	.word	0x080065b1
 8006524:	080065c5 	.word	0x080065c5
 8006528:	0800660f 	.word	0x0800660f
 800652c:	0800653d 	.word	0x0800653d
 8006530:	0800653d 	.word	0x0800653d
 8006534:	080065b1 	.word	0x080065b1
 8006538:	080065c5 	.word	0x080065c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	18d1      	adds	r1, r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655c:	f7ff ff5c 	bl	8006418 <prvInsertTimerInActiveList>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d069      	beq.n	800663a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d05e      	beq.n	800663a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	441a      	add	r2, r3
 8006584:	2300      	movs	r3, #0
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	2100      	movs	r1, #0
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f7ff fe05 	bl	800619c <xTimerGenericCommand>
 8006592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d14f      	bne.n	800663a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61bb      	str	r3, [r7, #24]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065c2:	e03a      	b.n	800663a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	617b      	str	r3, [r7, #20]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	18d1      	adds	r1, r2, r3
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006608:	f7ff ff06 	bl	8006418 <prvInsertTimerInActiveList>
					break;
 800660c:	e015      	b.n	800663a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800661c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661e:	f000 fb25 	bl	8006c6c <vPortFree>
 8006622:	e00a      	b.n	800663a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006636:	e000      	b.n	800663a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800663a:	4b08      	ldr	r3, [pc, #32]	; (800665c <prvProcessReceivedCommands+0x1c0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	1d39      	adds	r1, r7, #4
 8006640:	2200      	movs	r2, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f8fc 	bl	8004840 <xQueueReceive>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	f47f af2a 	bne.w	80064a4 <prvProcessReceivedCommands+0x8>
	}
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000d40 	.word	0x20000d40

08006660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006666:	e048      	b.n	80066fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006668:	4b2d      	ldr	r3, [pc, #180]	; (8006720 <prvSwitchTimerLists+0xc0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006672:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <prvSwitchTimerLists+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3304      	adds	r3, #4
 8006680:	4618      	mov	r0, r3
 8006682:	f7fd fce5 	bl	8004050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02e      	beq.n	80066fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d90e      	bls.n	80066cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <prvSwitchTimerLists+0xc0>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3304      	adds	r3, #4
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7fd fc8a 	bl	8003fde <vListInsert>
 80066ca:	e016      	b.n	80066fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066cc:	2300      	movs	r3, #0
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	2300      	movs	r3, #0
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	2100      	movs	r1, #0
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fd60 	bl	800619c <xTimerGenericCommand>
 80066dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	603b      	str	r3, [r7, #0]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <prvSwitchTimerLists+0xc0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1b1      	bne.n	8006668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <prvSwitchTimerLists+0xc0>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <prvSwitchTimerLists+0xc4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a04      	ldr	r2, [pc, #16]	; (8006720 <prvSwitchTimerLists+0xc0>)
 8006710:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006712:	4a04      	ldr	r2, [pc, #16]	; (8006724 <prvSwitchTimerLists+0xc4>)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6013      	str	r3, [r2, #0]
}
 8006718:	bf00      	nop
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000d38 	.word	0x20000d38
 8006724:	20000d3c 	.word	0x20000d3c

08006728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800672e:	f000 f969 	bl	8006a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d120      	bne.n	800677c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800673a:	4814      	ldr	r0, [pc, #80]	; (800678c <prvCheckForValidListAndQueue+0x64>)
 800673c:	f7fd fbfe 	bl	8003f3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006740:	4813      	ldr	r0, [pc, #76]	; (8006790 <prvCheckForValidListAndQueue+0x68>)
 8006742:	f7fd fbfb 	bl	8003f3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <prvCheckForValidListAndQueue+0x6c>)
 8006748:	4a10      	ldr	r2, [pc, #64]	; (800678c <prvCheckForValidListAndQueue+0x64>)
 800674a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <prvCheckForValidListAndQueue+0x70>)
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <prvCheckForValidListAndQueue+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006752:	2300      	movs	r3, #0
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <prvCheckForValidListAndQueue+0x74>)
 8006758:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <prvCheckForValidListAndQueue+0x78>)
 800675a:	2110      	movs	r1, #16
 800675c:	200a      	movs	r0, #10
 800675e:	f7fd fd09 	bl	8004174 <xQueueGenericCreateStatic>
 8006762:	4603      	mov	r3, r0
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 8006766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006768:	4b07      	ldr	r3, [pc, #28]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <prvCheckForValidListAndQueue+0x60>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	490b      	ldr	r1, [pc, #44]	; (80067a4 <prvCheckForValidListAndQueue+0x7c>)
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fc1a 	bl	8004fb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800677c:	f000 f972 	bl	8006a64 <vPortExitCritical>
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000d40 	.word	0x20000d40
 800678c:	20000d10 	.word	0x20000d10
 8006790:	20000d24 	.word	0x20000d24
 8006794:	20000d38 	.word	0x20000d38
 8006798:	20000d3c 	.word	0x20000d3c
 800679c:	20000dec 	.word	0x20000dec
 80067a0:	20000d4c 	.word	0x20000d4c
 80067a4:	080082dc 	.word	0x080082dc

080067a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3b04      	subs	r3, #4
 80067b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b04      	subs	r3, #4
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 0201 	bic.w	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067d8:	4a0c      	ldr	r2, [pc, #48]	; (800680c <pxPortInitialiseStack+0x64>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b14      	subs	r3, #20
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f06f 0202 	mvn.w	r2, #2
 80067f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3b20      	subs	r3, #32
 80067fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067fe:	68fb      	ldr	r3, [r7, #12]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	08006811 	.word	0x08006811

08006810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <prvTaskExitError+0x54>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d00a      	beq.n	800683a <prvTaskExitError+0x2a>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <prvTaskExitError+0x28>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60bb      	str	r3, [r7, #8]
}
 800684c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800684e:	bf00      	nop
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0fc      	beq.n	8006850 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	2000000c 	.word	0x2000000c
	...

08006870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <pxCurrentTCBConst2>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	f380 8809 	msr	PSP, r0
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	4770      	bx	lr
 800688c:	f3af 8000 	nop.w

08006890 <pxCurrentTCBConst2>:
 8006890:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006898:	4808      	ldr	r0, [pc, #32]	; (80068bc <prvPortStartFirstTask+0x24>)
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f380 8808 	msr	MSP, r0
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8814 	msr	CONTROL, r0
 80068aa:	b662      	cpsie	i
 80068ac:	b661      	cpsie	f
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	df00      	svc	0
 80068b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ba:	bf00      	nop
 80068bc:	e000ed08 	.word	0xe000ed08

080068c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068c6:	4b46      	ldr	r3, [pc, #280]	; (80069e0 <xPortStartScheduler+0x120>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a46      	ldr	r2, [pc, #280]	; (80069e4 <xPortStartScheduler+0x124>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10a      	bne.n	80068e6 <xPortStartScheduler+0x26>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	613b      	str	r3, [r7, #16]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068e6:	4b3e      	ldr	r3, [pc, #248]	; (80069e0 <xPortStartScheduler+0x120>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3f      	ldr	r2, [pc, #252]	; (80069e8 <xPortStartScheduler+0x128>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d10a      	bne.n	8006906 <xPortStartScheduler+0x46>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006906:	4b39      	ldr	r3, [pc, #228]	; (80069ec <xPortStartScheduler+0x12c>)
 8006908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	22ff      	movs	r2, #255	; 0xff
 8006916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006928:	b2da      	uxtb	r2, r3
 800692a:	4b31      	ldr	r3, [pc, #196]	; (80069f0 <xPortStartScheduler+0x130>)
 800692c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800692e:	4b31      	ldr	r3, [pc, #196]	; (80069f4 <xPortStartScheduler+0x134>)
 8006930:	2207      	movs	r2, #7
 8006932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006934:	e009      	b.n	800694a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006936:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <xPortStartScheduler+0x134>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	4a2d      	ldr	r2, [pc, #180]	; (80069f4 <xPortStartScheduler+0x134>)
 800693e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	d0ef      	beq.n	8006936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006956:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <xPortStartScheduler+0x134>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1c3 0307 	rsb	r3, r3, #7
 800695e:	2b04      	cmp	r3, #4
 8006960:	d00a      	beq.n	8006978 <xPortStartScheduler+0xb8>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	60bb      	str	r3, [r7, #8]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006978:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <xPortStartScheduler+0x134>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <xPortStartScheduler+0x134>)
 8006980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006982:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <xPortStartScheduler+0x134>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800698a:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <xPortStartScheduler+0x134>)
 800698c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006996:	4b18      	ldr	r3, [pc, #96]	; (80069f8 <xPortStartScheduler+0x138>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <xPortStartScheduler+0x138>)
 800699c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <xPortStartScheduler+0x138>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <xPortStartScheduler+0x138>)
 80069a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069ae:	f000 f8dd 	bl	8006b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <xPortStartScheduler+0x13c>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069b8:	f000 f8fc 	bl	8006bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069bc:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <xPortStartScheduler+0x140>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <xPortStartScheduler+0x140>)
 80069c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069c8:	f7ff ff66 	bl	8006898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069cc:	f7fe ff4a 	bl	8005864 <vTaskSwitchContext>
	prvTaskExitError();
 80069d0:	f7ff ff1e 	bl	8006810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	e000ed00 	.word	0xe000ed00
 80069e4:	410fc271 	.word	0x410fc271
 80069e8:	410fc270 	.word	0x410fc270
 80069ec:	e000e400 	.word	0xe000e400
 80069f0:	20000e3c 	.word	0x20000e3c
 80069f4:	20000e40 	.word	0x20000e40
 80069f8:	e000ed20 	.word	0xe000ed20
 80069fc:	2000000c 	.word	0x2000000c
 8006a00:	e000ef34 	.word	0xe000ef34

08006a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <vPortEnterCritical+0x58>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a0d      	ldr	r2, [pc, #52]	; (8006a5c <vPortEnterCritical+0x58>)
 8006a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <vPortEnterCritical+0x58>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10f      	bne.n	8006a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <vPortEnterCritical+0x5c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	603b      	str	r3, [r7, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <vPortEnterCritical+0x4a>
	}
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	2000000c 	.word	0x2000000c
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <vPortExitCritical+0x50>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <vPortExitCritical+0x24>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	607b      	str	r3, [r7, #4]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <vPortExitCritical+0x50>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <vPortExitCritical+0x50>)
 8006a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <vPortExitCritical+0x50>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <vPortExitCritical+0x42>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f383 8811 	msr	BASEPRI, r3
}
 8006aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000000c 	.word	0x2000000c
	...

08006ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ac0:	f3ef 8009 	mrs	r0, PSP
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <pxCurrentTCBConst>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f01e 0f10 	tst.w	lr, #16
 8006ad0:	bf08      	it	eq
 8006ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	6010      	str	r0, [r2, #0]
 8006adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ae4:	f380 8811 	msr	BASEPRI, r0
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f7fe feb8 	bl	8005864 <vTaskSwitchContext>
 8006af4:	f04f 0000 	mov.w	r0, #0
 8006af8:	f380 8811 	msr	BASEPRI, r0
 8006afc:	bc09      	pop	{r0, r3}
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	6808      	ldr	r0, [r1, #0]
 8006b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b06:	f01e 0f10 	tst.w	lr, #16
 8006b0a:	bf08      	it	eq
 8006b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b10:	f380 8809 	msr	PSP, r0
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w

08006b20 <pxCurrentTCBConst>:
 8006b20:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b42:	f7fe fdd5 	bl	80056f0 <xTaskIncrementTick>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <xPortSysTickHandler+0x40>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <vPortSetupTimerInterrupt+0x34>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b76:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <vPortSetupTimerInterrupt+0x38>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <vPortSetupTimerInterrupt+0x3c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <vPortSetupTimerInterrupt+0x40>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <vPortSetupTimerInterrupt+0x44>)
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b8e:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <vPortSetupTimerInterrupt+0x34>)
 8006b90:	2207      	movs	r2, #7
 8006b92:	601a      	str	r2, [r3, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	e000e010 	.word	0xe000e010
 8006ba4:	e000e018 	.word	0xe000e018
 8006ba8:	20000000 	.word	0x20000000
 8006bac:	10624dd3 	.word	0x10624dd3
 8006bb0:	e000e014 	.word	0xe000e014

08006bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bc4 <vPortEnableVFP+0x10>
 8006bb8:	6801      	ldr	r1, [r0, #0]
 8006bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bbe:	6001      	str	r1, [r0, #0]
 8006bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bc2:	bf00      	nop
 8006bc4:	e000ed88 	.word	0xe000ed88

08006bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bce:	f3ef 8305 	mrs	r3, IPSR
 8006bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b0f      	cmp	r3, #15
 8006bd8:	d914      	bls.n	8006c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <vPortValidateInterruptPriority+0x70>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <vPortValidateInterruptPriority+0x74>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	7afa      	ldrb	r2, [r7, #11]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d20a      	bcs.n	8006c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <vPortValidateInterruptPriority+0x78>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <vPortValidateInterruptPriority+0x7c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d90a      	bls.n	8006c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	603b      	str	r3, [r7, #0]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <vPortValidateInterruptPriority+0x60>
	}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	e000e3f0 	.word	0xe000e3f0
 8006c3c:	20000e3c 	.word	0x20000e3c
 8006c40:	e000ed0c 	.word	0xe000ed0c
 8006c44:	20000e40 	.word	0x20000e40

08006c48 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8006c50:	f7fe fc92 	bl	8005578 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fe73 	bl	8007940 <malloc>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c5e:	f7fe fc99 	bl	8005594 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8006c62:	68fb      	ldr	r3, [r7, #12]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	if( pv )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d006      	beq.n	8006c88 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8006c7a:	f7fe fc7d 	bl	8005578 <vTaskSuspendAll>
		{
			free( pv );
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fe66 	bl	8007950 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8006c84:	f7fe fc86 	bl	8005594 <xTaskResumeAll>
	}
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <_ZN11SmallScreen4initEv>:
#include <Display/font6x8.h>
#include <Display/SmallScreen.hpp>
#include <string.h>


uint8_t SmallScreen::init() {
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	sdd1306.init();
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f88a 	bl	8006db4 <_ZN7SSD13064initEv>
	return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <_ZN11SmallScreen5clearEv>:

void SmallScreen::clear() {
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	6078      	str	r0, [r7, #4]
	sdd1306.setDrawingArea(0, 127, 0, 7);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	2307      	movs	r3, #7
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	227f      	movs	r2, #127	; 0x7f
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f000 f913 	bl	8006ee8 <_ZN7SSD130614setDrawingAreaEhhhh>

	memset(buffer, 0, 128);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3305      	adds	r3, #5
 8006cc6:	2280      	movs	r2, #128	; 0x80
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fe56 	bl	800797c <memset>
	for (uint8_t line = 0; line < 8; line++) {
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b07      	cmp	r3, #7
 8006cd8:	d80a      	bhi.n	8006cf0 <_ZN11SmallScreen5clearEv+0x46>
		sdd1306.sendFramebuffer(buffer, 128);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3305      	adds	r3, #5
 8006ce0:	2280      	movs	r2, #128	; 0x80
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f000 f92d 	bl	8006f42 <_ZN7SSD130615sendFramebufferEPhh>
	for (uint8_t line = 0; line < 8; line++) {
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	3301      	adds	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
 8006cee:	e7f1      	b.n	8006cd4 <_ZN11SmallScreen5clearEv+0x2a>
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZN11SmallScreen10appendLineEPKc>:
	memset(buffer + col, 0, 128 - col);

	sdd1306.sendFramebuffer(buffer, 128);
}

void SmallScreen::appendLine(const char *textLine) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]

	memset(buffer, 0, 128);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3305      	adds	r3, #5
 8006d06:	2280      	movs	r2, #128	; 0x80
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fe36 	bl	800797c <memset>
	sdd1306.setDrawingArea(0, 127, currentLineNumber, currentLineNumber);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	791a      	ldrb	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	791b      	ldrb	r3, [r3, #4]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	227f      	movs	r2, #127	; 0x7f
 8006d20:	2100      	movs	r1, #0
 8006d22:	f000 f8e1 	bl	8006ee8 <_ZN7SSD130614setDrawingAreaEhhhh>
	sdd1306.sendFramebuffer(buffer, 128);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3305      	adds	r3, #5
 8006d2c:	2280      	movs	r2, #128	; 0x80
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f000 f907 	bl	8006f42 <_ZN7SSD130615sendFramebufferEPhh>

	currentLineNumber = (currentLineNumber + 1) % 8;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	791b      	ldrb	r3, [r3, #4]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	425a      	negs	r2, r3
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	f002 0207 	and.w	r2, r2, #7
 8006d44:	bf58      	it	pl
 8006d46:	4253      	negpl	r3, r2
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	711a      	strb	r2, [r3, #4]

	sdd1306.setDisplayOffset(currentLineNumber);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	791b      	ldrb	r3, [r3, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f000 f8b1 	bl	8006ebe <_ZN7SSD130616setDisplayOffsetEh>

	uint8_t col = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
	while (*textLine != '\0') {
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d017      	beq.n	8006d98 <_ZN11SmallScreen10appendLineEPKc+0xa0>
		memcpy(buffer + col, font6x8[(uint8_t) *textLine++ - 32], 6);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1d5a      	adds	r2, r3, #5
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	18d0      	adds	r0, r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	603a      	str	r2, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f1a3 0220 	sub.w	r2, r3, #32
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <_ZN11SmallScreen10appendLineEPKc+0xb8>)
 8006d86:	4413      	add	r3, r2
 8006d88:	2206      	movs	r2, #6
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	f000 fde8 	bl	8007960 <memcpy>
		col += 6;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	3306      	adds	r3, #6
 8006d94:	73fb      	strb	r3, [r7, #15]
	while (*textLine != '\0') {
 8006d96:	e7e3      	b.n	8006d60 <_ZN11SmallScreen10appendLineEPKc+0x68>
	}

	sdd1306.sendFramebuffer(buffer, col);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3305      	adds	r3, #5
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	4619      	mov	r1, r3
 8006da2:	f000 f8ce 	bl	8006f42 <_ZN7SSD130615sendFramebufferEPhh>
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	08008408 	.word	0x08008408

08006db4 <_ZN7SSD13064initEv>:
 */

#include <Display/Ssd1306.hpp>
#include <stdint.h>

void SSD1306::init() {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	// Turn display off
	sendCommand(SSD1306_DISPLAYOFF);
 8006dbc:	21ae      	movs	r1, #174	; 0xae
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f864 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETDISPLAYCLOCKDIV);
 8006dc4:	21d5      	movs	r1, #213	; 0xd5
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f860 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x80);
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f85c 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETMULTIPLEX);
 8006dd4:	21a8      	movs	r1, #168	; 0xa8
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f858 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x3F);
 8006ddc:	213f      	movs	r1, #63	; 0x3f
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f854 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETDISPLAYOFFSET);
 8006de4:	21d3      	movs	r1, #211	; 0xd3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f850 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x00);
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f84c 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETSTARTLINE | 0x00);
 8006df4:	2140      	movs	r1, #64	; 0x40
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f848 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	// We use internal charge pump
	sendCommand(SSD1306_CHARGEPUMP);
 8006dfc:	218d      	movs	r1, #141	; 0x8d
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f844 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x14);
 8006e04:	2114      	movs	r1, #20
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f840 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	// Horizontal memory mode
	sendCommand(SSD1306_MEMORYMODE);
 8006e0c:	2120      	movs	r1, #32
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f83c 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x00);
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f838 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SEGREMAP | 0x1);
 8006e1c:	21a1      	movs	r1, #161	; 0xa1
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f834 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_COMSCANDEC);
 8006e24:	21c8      	movs	r1, #200	; 0xc8
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f830 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETCOMPINS);
 8006e2c:	21da      	movs	r1, #218	; 0xda
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f82c 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x12);
 8006e34:	2112      	movs	r1, #18
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f828 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	// Max contrast
	sendCommand(SSD1306_SETCONTRAST);
 8006e3c:	2181      	movs	r1, #129	; 0x81
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f824 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0xCF);
 8006e44:	21cf      	movs	r1, #207	; 0xcf
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f820 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETPRECHARGE);
 8006e4c:	21d9      	movs	r1, #217	; 0xd9
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f81c 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0xF1);
 8006e54:	21f1      	movs	r1, #241	; 0xf1
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f818 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_SETVCOMDETECT);
 8006e5c:	21db      	movs	r1, #219	; 0xdb
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f814 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(0x40);
 8006e64:	2140      	movs	r1, #64	; 0x40
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f810 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_DISPLAYALLON_RESUME);
 8006e6c:	21a4      	movs	r1, #164	; 0xa4
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f80c 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	// Non-inverted display
	sendCommand(SSD1306_NORMALDISPLAY);
 8006e74:	21a6      	movs	r1, #166	; 0xa6
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f808 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	// Turn display back on
	sendCommand(SSD1306_DISPLAYON);
 8006e7c:	21af      	movs	r1, #175	; 0xaf
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f804 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZN7SSD130611sendCommandEh>:

uint8_t SSD1306::sendCommand(uint8_t command) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af04      	add	r7, sp, #16
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
	//TWI_write_reg(SSD1306_DEFAULT_ADDRESS, 0x00, &command, 1);
	return HAL_I2C_Mem_Write(&hi2c, SSD1306_DEFAULT_ADDRESS, 0x00, 1, &command, 1, SSD1306_MAX_DELAY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	1cfb      	adds	r3, r7, #3
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	2301      	movs	r3, #1
 8006eac:	2200      	movs	r2, #0
 8006eae:	2178      	movs	r1, #120	; 0x78
 8006eb0:	f7fa fba8 	bl	8001604 <HAL_I2C_Mem_Write>
 8006eb4:	4603      	mov	r3, r0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <_ZN7SSD130616setDisplayOffsetEh>:

void SSD1306::invert(uint8_t inverted) {
	sendCommand(inverted ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
}

void SSD1306::setDisplayOffset(uint8_t offsetLine) {
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
	sendCommand(SSD1306_SETDISPLAYOFFSET);
 8006eca:	21d3      	movs	r1, #211	; 0xd3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ffdd 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(offsetLine << 3);
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff ffd6 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <_ZN7SSD130614setDrawingAreaEhhhh>:

void SSD1306::setDrawingArea(uint8_t startCol, uint8_t endCol, uint8_t startPage, uint8_t endPage) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	70fb      	strb	r3, [r7, #3]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70bb      	strb	r3, [r7, #2]
 8006efe:	4613      	mov	r3, r2
 8006f00:	707b      	strb	r3, [r7, #1]
	sendCommand(SSD1306_COLUMNADDR);
 8006f02:	2121      	movs	r1, #33	; 0x21
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ffc1 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(startCol);
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff ffbc 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(endCol);
 8006f14:	78bb      	ldrb	r3, [r7, #2]
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff ffb7 	bl	8006e8c <_ZN7SSD130611sendCommandEh>

	sendCommand(SSD1306_PAGEADDR);
 8006f1e:	2122      	movs	r1, #34	; 0x22
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff ffb3 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(startPage);
 8006f26:	787b      	ldrb	r3, [r7, #1]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ffae 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
	sendCommand(endPage);
 8006f30:	7c3b      	ldrb	r3, [r7, #16]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ffa9 	bl	8006e8c <_ZN7SSD130611sendCommandEh>
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <_ZN7SSD130615sendFramebufferEPhh>:

void SSD1306::sendFramebuffer(uint8_t *buffer, uint8_t size) {
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b08a      	sub	sp, #40	; 0x28
 8006f46:	af04      	add	r7, sp, #16
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71fb      	strb	r3, [r7, #7]
	do {
		uint8_t bytesToWrite = size < 16 ? size : 16;
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	bf28      	it	cs
 8006f56:	2310      	movcs	r3, #16
 8006f58:	75fb      	strb	r3, [r7, #23]
		//TWI_write_reg(SSD1306_DEFAULT_ADDRESS, 0x40, buffer, bytesToWrite);
		HAL_I2C_Mem_Write(&hi2c, SSD1306_DEFAULT_ADDRESS, 0x40, 1, buffer, bytesToWrite, SSD1306_MAX_DELAY);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f66:	9202      	str	r2, [sp, #8]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	2240      	movs	r2, #64	; 0x40
 8006f72:	2178      	movs	r1, #120	; 0x78
 8006f74:	f7fa fb46 	bl	8001604 <HAL_I2C_Mem_Write>
		size -= bytesToWrite;
 8006f78:	79fa      	ldrb	r2, [r7, #7]
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	71fb      	strb	r3, [r7, #7]
		buffer += 16;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3310      	adds	r3, #16
 8006f84:	60bb      	str	r3, [r7, #8]
	} while (size > 0);
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d000      	beq.n	8006f8e <_ZN7SSD130615sendFramebufferEPhh+0x4c>
	do {
 8006f8c:	e7e0      	b.n	8006f50 <_ZN7SSD130615sendFramebufferEPhh+0xe>
}
 8006f8e:	bf00      	nop
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <_ZN7SSD1306C1ER19__I2C_HandleTypeDef>:

private:
	I2C_HandleTypeDef &hi2c;

public:
	SSD1306(I2C_HandleTypeDef &hi2c) : hi2c(hi2c) {
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	601a      	str	r2, [r3, #0]
	}
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <_ZN11SmallScreenC1Ev>:

	uint8_t currentLineNumber;
	uint8_t buffer[128];

public:
	SmallScreen() : sdd1306(hi2c1), currentLineNumber(0) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4906      	ldr	r1, [pc, #24]	; (8006fd8 <_ZN11SmallScreenC1Ev+0x24>)
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ffe8 	bl	8006f96 <_ZN7SSD1306C1ER19__I2C_HandleTypeDef>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	711a      	strb	r2, [r3, #4]
	}
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000f28 	.word	0x20000f28

08006fdc <_ZN6Bmp280C1ER19__I2C_HandleTypeDef>:
	uint32_t compensate_P_int64(int32_t adc_P);

	uint8_t setMode (uint8_t mode);

public:
	Bmp280(I2C_HandleTypeDef &hi2c) : hi2c(hi2c) {
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	601a      	str	r2, [r3, #0]
	}
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <_Z8vLEDTaskPv>:

osThreadId_t testThread;

osMessageQueueId_t sensorReadoutsQueue;

void vLEDTask(void *pvParameters) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

	for (;;) {

		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8007004:	2104      	movs	r1, #4
 8007006:	4804      	ldr	r0, [pc, #16]	; (8007018 <_Z8vLEDTaskPv+0x1c>)
 8007008:	f7fa f822 	bl	8001050 <HAL_GPIO_TogglePin>
		vTaskDelay( 500 / portTICK_RATE_MS );
 800700c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007010:	f7fe fa0e 	bl	8005430 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8007014:	e7f6      	b.n	8007004 <_Z8vLEDTaskPv+0x8>
 8007016:	bf00      	nop
 8007018:	48000800 	.word	0x48000800

0800701c <_Z29sensorReadoutsCollectorThreadPv>:

		osDelay( 500 / portTICK_RATE_MS );
	}
}

void sensorReadoutsCollectorThread(void *pvParameters) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b08c      	sub	sp, #48	; 0x30
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	uint8_t messageBuffer[30];
	for(;;) {
		osStatus_t status = osMessageQueueGet(sensorReadoutsQueue, messageBuffer, NULL, portMAX_DELAY);
 8007024:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <_Z29sensorReadoutsCollectorThreadPv+0x44>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	f107 010c 	add.w	r1, r7, #12
 800702c:	f04f 33ff 	mov.w	r3, #4294967295
 8007030:	2200      	movs	r2, #0
 8007032:	f7fc fef1 	bl	8003e18 <osMessageQueueGet>
 8007036:	62f8      	str	r0, [r7, #44]	; 0x2c

		if (status == osOK) {
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <_Z29sensorReadoutsCollectorThreadPv+0x30>
			smallScreen.appendLine((char *)messageBuffer);
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	4619      	mov	r1, r3
 8007044:	4807      	ldr	r0, [pc, #28]	; (8007064 <_Z29sensorReadoutsCollectorThreadPv+0x48>)
 8007046:	f7ff fe57 	bl	8006cf8 <_ZN11SmallScreen10appendLineEPKc>
 800704a:	e7eb      	b.n	8007024 <_Z29sensorReadoutsCollectorThreadPv+0x8>
		} else if (status != osErrorTimeout) {
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	f113 0f02 	cmn.w	r3, #2
 8007052:	d0e7      	beq.n	8007024 <_Z29sensorReadoutsCollectorThreadPv+0x8>
			osDelay(5000 / portTICK_RATE_MS);
 8007054:	f241 3088 	movw	r0, #5000	; 0x1388
 8007058:	f7fc fcd0 	bl	80039fc <osDelay>
		}
	}
 800705c:	e7e2      	b.n	8007024 <_Z29sensorReadoutsCollectorThreadPv+0x8>
 800705e:	bf00      	nop
 8007060:	20000ef8 	.word	0x20000ef8
 8007064:	20000e44 	.word	0x20000e44

08007068 <EnvSensorV2_Init>:
}

void EnvSensorV2_Init() {
 8007068:	b580      	push	{r7, lr}
 800706a:	b098      	sub	sp, #96	; 0x60
 800706c:	af00      	add	r7, sp, #0
	const osThreadAttr_t ledBlinkThreadaAttributes = {
 800706e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007072:	2224      	movs	r2, #36	; 0x24
 8007074:	2100      	movs	r1, #0
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fc80 	bl	800797c <memset>
 800707c:	4b23      	ldr	r3, [pc, #140]	; (800710c <EnvSensorV2_Init+0xa4>)
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007080:	2380      	movs	r3, #128	; 0x80
 8007082:	653b      	str	r3, [r7, #80]	; 0x50
 8007084:	2308      	movs	r3, #8
 8007086:	657b      	str	r3, [r7, #84]	; 0x54
		.name = "led-blink-th",
		.stack_size = 128,
		.priority = (osPriority_t) osPriorityLow
	};
	testThread = osThreadNew(vLEDTask, NULL, &ledBlinkThreadaAttributes);
 8007088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800708c:	461a      	mov	r2, r3
 800708e:	2100      	movs	r1, #0
 8007090:	481f      	ldr	r0, [pc, #124]	; (8007110 <EnvSensorV2_Init+0xa8>)
 8007092:	f7fc fc21 	bl	80038d8 <osThreadNew>
 8007096:	4603      	mov	r3, r0
 8007098:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <EnvSensorV2_Init+0xac>)
 800709a:	6013      	str	r3, [r2, #0]

	const osMessageQueueAttr_t sensorsReadoutsQueueAttributes = {
 800709c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	605a      	str	r2, [r3, #4]
 80070a6:	609a      	str	r2, [r3, #8]
 80070a8:	60da      	str	r2, [r3, #12]
 80070aa:	611a      	str	r2, [r3, #16]
 80070ac:	615a      	str	r2, [r3, #20]
 80070ae:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <EnvSensorV2_Init+0xb0>)
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
		.name = "sensors-queue"
	};
	sensorReadoutsQueue = osMessageQueueNew(5, 30, &sensorsReadoutsQueueAttributes);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	461a      	mov	r2, r3
 80070b8:	211e      	movs	r1, #30
 80070ba:	2005      	movs	r0, #5
 80070bc:	f7fc fdd8 	bl	8003c70 <osMessageQueueNew>
 80070c0:	4603      	mov	r3, r0
 80070c2:	4a16      	ldr	r2, [pc, #88]	; (800711c <EnvSensorV2_Init+0xb4>)
 80070c4:	6013      	str	r3, [r2, #0]

	const osThreadAttr_t sensorReadoutsCollectorThreadAttributes = {
 80070c6:	463b      	mov	r3, r7
 80070c8:	2224      	movs	r2, #36	; 0x24
 80070ca:	2100      	movs	r1, #0
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fc55 	bl	800797c <memset>
 80070d2:	4b13      	ldr	r3, [pc, #76]	; (8007120 <EnvSensorV2_Init+0xb8>)
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	2318      	movs	r3, #24
 80070de:	61bb      	str	r3, [r7, #24]
		.name = "sensors-collect-th",
		.stack_size = 128 * sizeof(StackType_t),
		.priority = (osPriority_t) osPriorityNormal
	};
	osThreadNew(sensorReadoutsCollectorThread, NULL, &sensorReadoutsCollectorThreadAttributes);
 80070e0:	463b      	mov	r3, r7
 80070e2:	461a      	mov	r2, r3
 80070e4:	2100      	movs	r1, #0
 80070e6:	480f      	ldr	r0, [pc, #60]	; (8007124 <EnvSensorV2_Init+0xbc>)
 80070e8:	f7fc fbf6 	bl	80038d8 <osThreadNew>


	smallScreen.init();
 80070ec:	480e      	ldr	r0, [pc, #56]	; (8007128 <EnvSensorV2_Init+0xc0>)
 80070ee:	f7ff fdcf 	bl	8006c90 <_ZN11SmallScreen4initEv>
	smallScreen.clear();
 80070f2:	480d      	ldr	r0, [pc, #52]	; (8007128 <EnvSensorV2_Init+0xc0>)
 80070f4:	f7ff fdd9 	bl	8006caa <_ZN11SmallScreen5clearEv>
	smallScreen.appendLine("Hello world");
 80070f8:	490c      	ldr	r1, [pc, #48]	; (800712c <EnvSensorV2_Init+0xc4>)
 80070fa:	480b      	ldr	r0, [pc, #44]	; (8007128 <EnvSensorV2_Init+0xc0>)
 80070fc:	f7ff fdfc 	bl	8006cf8 <_ZN11SmallScreen10appendLineEPKc>
//	} else {
//		bmp280.startContinousMeasurement();
//	}


	CO2SensorInit();
 8007100:	f000 f974 	bl	80073ec <_Z13CO2SensorInitv>
		.priority = (osPriority_t) osPriorityNormal
	};
	//osThreadNew(vCounterTask, NULL, &counterThreadAttributes);


}
 8007104:	bf00      	nop
 8007106:	3760      	adds	r7, #96	; 0x60
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	08008308 	.word	0x08008308
 8007110:	08006ffd 	.word	0x08006ffd
 8007114:	20000ef4 	.word	0x20000ef4
 8007118:	08008318 	.word	0x08008318
 800711c:	20000ef8 	.word	0x20000ef8
 8007120:	08008328 	.word	0x08008328
 8007124:	0800701d 	.word	0x0800701d
 8007128:	20000e44 	.word	0x20000e44
 800712c:	0800833c 	.word	0x0800833c

08007130 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SCD30_READY_Pin) {
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007140:	d101      	bne.n	8007146 <HAL_GPIO_EXTI_Callback+0x16>
		SCD30ReadyInterrupedHandler();
 8007142:	f000 fa19 	bl	8007578 <_Z27SCD30ReadyInterrupedHandlerv>
	}
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <_Z41__static_initialization_and_destruction_0ii>:
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10b      	bne.n	8007178 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007166:	4293      	cmp	r3, r2
 8007168:	d106      	bne.n	8007178 <_Z41__static_initialization_and_destruction_0ii+0x28>
SmallScreen smallScreen;
 800716a:	4805      	ldr	r0, [pc, #20]	; (8007180 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800716c:	f7ff ff22 	bl	8006fb4 <_ZN11SmallScreenC1Ev>
Bmp280 bmp280(hi2c1);
 8007170:	4904      	ldr	r1, [pc, #16]	; (8007184 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8007172:	4805      	ldr	r0, [pc, #20]	; (8007188 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8007174:	f7ff ff32 	bl	8006fdc <_ZN6Bmp280C1ER19__I2C_HandleTypeDef>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000e44 	.word	0x20000e44
 8007184:	20000f28 	.word	0x20000f28
 8007188:	20000ecc 	.word	0x20000ecc

0800718c <_GLOBAL__sub_I_smallScreen>:
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
 8007190:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007194:	2001      	movs	r0, #1
 8007196:	f7ff ffdb 	bl	8007150 <_Z41__static_initialization_and_destruction_0ii>
 800719a:	bd80      	pop	{r7, pc}

0800719c <ftoa>:
	0.0000000005f,		// 9
	0.00000000005f		// 10
};

char * ftoa(float f, char * buf, int precision)
{
 800719c:	b480      	push	{r7}
 800719e:	b08b      	sub	sp, #44	; 0x2c
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80071a6:	60b8      	str	r0, [r7, #8]
 80071a8:	6079      	str	r1, [r7, #4]
	char * ptr = buf;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b0a      	cmp	r3, #10
 80071b6:	dd01      	ble.n	80071bc <ftoa+0x20>
		precision = MAX_PRECISION;
 80071b8:	230a      	movs	r3, #10
 80071ba:	607b      	str	r3, [r7, #4]

	// sign stuff
	if (f < 0)
 80071bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80071c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c8:	d50a      	bpl.n	80071e0 <ftoa+0x44>
	{
		f = -f;
 80071ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80071ce:	eef1 7a67 	vneg.f32	s15, s15
 80071d2:	edc7 7a03 	vstr	s15, [r7, #12]
		*ptr++ = '-';
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	627a      	str	r2, [r7, #36]	; 0x24
 80071dc:	222d      	movs	r2, #45	; 0x2d
 80071de:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da49      	bge.n	800727a <ftoa+0xde>
	{
		if (f < 1.0f) precision = 6;
 80071e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80071ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f6:	d502      	bpl.n	80071fe <ftoa+0x62>
 80071f8:	2306      	movs	r3, #6
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	e03d      	b.n	800727a <ftoa+0xde>
		else if (f < 10.0f) precision = 5;
 80071fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8007202:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720e:	d502      	bpl.n	8007216 <ftoa+0x7a>
 8007210:	2305      	movs	r3, #5
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e031      	b.n	800727a <ftoa+0xde>
		else if (f < 100.0f) precision = 4;
 8007216:	edd7 7a03 	vldr	s15, [r7, #12]
 800721a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80073b4 <ftoa+0x218>
 800721e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007226:	d502      	bpl.n	800722e <ftoa+0x92>
 8007228:	2304      	movs	r3, #4
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	e025      	b.n	800727a <ftoa+0xde>
		else if (f < 1000.0f) precision = 3;
 800722e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007232:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80073b8 <ftoa+0x21c>
 8007236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723e:	d502      	bpl.n	8007246 <ftoa+0xaa>
 8007240:	2303      	movs	r3, #3
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	e019      	b.n	800727a <ftoa+0xde>
		else if (f < 10000.0f) precision = 2;
 8007246:	edd7 7a03 	vldr	s15, [r7, #12]
 800724a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80073bc <ftoa+0x220>
 800724e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007256:	d502      	bpl.n	800725e <ftoa+0xc2>
 8007258:	2302      	movs	r3, #2
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	e00d      	b.n	800727a <ftoa+0xde>
		else if (f < 100000.0f) precision = 1;
 800725e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007262:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80073c0 <ftoa+0x224>
 8007266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	d502      	bpl.n	8007276 <ftoa+0xda>
 8007270:	2301      	movs	r3, #1
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	e001      	b.n	800727a <ftoa+0xde>
		else precision = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	607b      	str	r3, [r7, #4]
	}

	// round value according the precision
	if (precision)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <ftoa+0xfc>
		f += rounders[precision];
 8007280:	4a50      	ldr	r2, [pc, #320]	; (80073c4 <ftoa+0x228>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	edd3 7a00 	vldr	s15, [r3]
 800728c:	ed97 7a03 	vldr	s14, [r7, #12]
 8007290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007294:	edc7 7a03 	vstr	s15, [r7, #12]

	// integer part...
	intPart = f;
 8007298:	edd7 7a03 	vldr	s15, [r7, #12]
 800729c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072a0:	ee17 3a90 	vmov	r3, s15
 80072a4:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80072b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072b8:	edc7 7a03 	vstr	s15, [r7, #12]

	if (!intPart)
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <ftoa+0x132>
		*ptr++ = '0';
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	627a      	str	r2, [r7, #36]	; 0x24
 80072c8:	2230      	movs	r2, #48	; 0x30
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	e038      	b.n	8007340 <ftoa+0x1a4>
	else
	{
		// save start pointer
		p = ptr;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80072d2:	e01a      	b.n	800730a <ftoa+0x16e>
		{
			*p++ = '0' + intPart % 10;
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <ftoa+0x22c>)
 80072d8:	fb83 1302 	smull	r1, r3, r3, r2
 80072dc:	1099      	asrs	r1, r3, #2
 80072de:	17d3      	asrs	r3, r2, #31
 80072e0:	1ac9      	subs	r1, r1, r3
 80072e2:	460b      	mov	r3, r1
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	440b      	add	r3, r1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	1ad1      	subs	r1, r2, r3
 80072ec:	b2ca      	uxtb	r2, r1
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	1c59      	adds	r1, r3, #1
 80072f2:	6239      	str	r1, [r7, #32]
 80072f4:	3230      	adds	r2, #48	; 0x30
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4a32      	ldr	r2, [pc, #200]	; (80073c8 <ftoa+0x22c>)
 80072fe:	fb82 1203 	smull	r1, r2, r2, r3
 8007302:	1092      	asrs	r2, r2, #2
 8007304:	17db      	asrs	r3, r3, #31
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e1      	bne.n	80072d4 <ftoa+0x138>
		}

		// save end pos
		p1 = p;
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8007314:	e00e      	b.n	8007334 <ftoa+0x198>
		{
			c = *--p;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	3b01      	subs	r3, #1
 800731a:	623b      	str	r3, [r7, #32]
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	627a      	str	r2, [r7, #36]	; 0x24
 8007330:	7dfa      	ldrb	r2, [r7, #23]
 8007332:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	429a      	cmp	r2, r3
 800733a:	d8ec      	bhi.n	8007316 <ftoa+0x17a>
		}

		// restore end pos
		ptr = p1;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d02c      	beq.n	80073a0 <ftoa+0x204>
	{
		// place decimal point
		*ptr++ = '.';
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	627a      	str	r2, [r7, #36]	; 0x24
 800734c:	222e      	movs	r2, #46	; 0x2e
 800734e:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8007350:	e021      	b.n	8007396 <ftoa+0x1fa>
		{
			f *= 10.0f;
 8007352:	edd7 7a03 	vldr	s15, [r7, #12]
 8007356:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800735a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800735e:	edc7 7a03 	vstr	s15, [r7, #12]
			c = f;
 8007362:	edd7 7a03 	vldr	s15, [r7, #12]
 8007366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736a:	edc7 7a00 	vstr	s15, [r7]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	627a      	str	r2, [r7, #36]	; 0x24
 8007378:	7dfa      	ldrb	r2, [r7, #23]
 800737a:	3230      	adds	r2, #48	; 0x30
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800738a:	ed97 7a03 	vldr	s14, [r7, #12]
 800738e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007392:	edc7 7a03 	vstr	s15, [r7, #12]
		while (precision--)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1e5a      	subs	r2, r3, #1
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1d8      	bne.n	8007352 <ftoa+0x1b6>
		}
	}

	// terminating zero
	*ptr = 0;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]

	return buf;
 80073a6:	68bb      	ldr	r3, [r7, #8]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	372c      	adds	r7, #44	; 0x2c
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	42c80000 	.word	0x42c80000
 80073b8:	447a0000 	.word	0x447a0000
 80073bc:	461c4000 	.word	0x461c4000
 80073c0:	47c35000 	.word	0x47c35000
 80073c4:	08008648 	.word	0x08008648
 80073c8:	66666667 	.word	0x66666667

080073cc <_ZN5Scd30C1ER19__I2C_HandleTypeDef>:
	uint8_t readCommand(uint16_t command, uint8_t dataSize);

	uint8_t setMeasurementInterval(uint16_t pressure);

public:
	Scd30(I2C_HandleTypeDef &hi2c) : hi2c(hi2c) {
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	601a      	str	r2, [r3, #0]
	}
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <_Z13CO2SensorInitv>:

extern osMessageQueueId_t sensorReadoutsQueue;
osThreadId_t co2ReadoutThreadHandle;
osSemaphoreId_t scd30ReadySemaphore = NULL;

void CO2SensorInit() {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af00      	add	r7, sp, #0

	const osSemaphoreAttr_t scd30ReadySemaphoreAttributes = {
 80073f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	609a      	str	r2, [r3, #8]
 80073fe:	60da      	str	r2, [r3, #12]
 8007400:	4b23      	ldr	r3, [pc, #140]	; (8007490 <_Z13CO2SensorInitv+0xa4>)
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
	  .name = "co2-sem"
	};
	scd30ReadySemaphore = osSemaphoreNew(1, 0, &scd30ReadySemaphoreAttributes);
 8007404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007408:	461a      	mov	r2, r3
 800740a:	2100      	movs	r1, #0
 800740c:	2001      	movs	r0, #1
 800740e:	f7fc fb10 	bl	8003a32 <osSemaphoreNew>
 8007412:	4603      	mov	r3, r0
 8007414:	4a1f      	ldr	r2, [pc, #124]	; (8007494 <_Z13CO2SensorInitv+0xa8>)
 8007416:	6013      	str	r3, [r2, #0]

	const osThreadAttr_t co2ReadoutThreadaAttributes = {
 8007418:	463b      	mov	r3, r7
 800741a:	2224      	movs	r2, #36	; 0x24
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f000 faac 	bl	800797c <memset>
 8007424:	4b1c      	ldr	r3, [pc, #112]	; (8007498 <_Z13CO2SensorInitv+0xac>)
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	2318      	movs	r3, #24
 8007430:	61bb      	str	r3, [r7, #24]
		.name = "co2-th-readout",
		.stack_size = 1024 * 4,
		.priority = (osPriority_t) osPriorityNormal
	};
	co2ReadoutThreadHandle = osThreadNew(vCO2Readout, NULL, &co2ReadoutThreadaAttributes);
 8007432:	463b      	mov	r3, r7
 8007434:	461a      	mov	r2, r3
 8007436:	2100      	movs	r1, #0
 8007438:	4818      	ldr	r0, [pc, #96]	; (800749c <_Z13CO2SensorInitv+0xb0>)
 800743a:	f7fc fa4d 	bl	80038d8 <osThreadNew>
 800743e:	4603      	mov	r3, r0
 8007440:	4a17      	ldr	r2, [pc, #92]	; (80074a0 <_Z13CO2SensorInitv+0xb4>)
 8007442:	6013      	str	r3, [r2, #0]

	uint8_t status = scd30.init(30);
 8007444:	211e      	movs	r1, #30
 8007446:	4817      	ldr	r0, [pc, #92]	; (80074a4 <_Z13CO2SensorInitv+0xb8>)
 8007448:	f000 f99a 	bl	8007780 <_ZN5Scd304initEt>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (status != HAL_OK) {
 8007452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <_Z13CO2SensorInitv+0x76>
		//smallScreen.appendLine("SCD - error");
	} else {
		scd30.startContinousMeasurement(0);
 800745a:	2100      	movs	r1, #0
 800745c:	4811      	ldr	r0, [pc, #68]	; (80074a4 <_Z13CO2SensorInitv+0xb8>)
 800745e:	f000 f97e 	bl	800775e <_ZN5Scd3025startContinousMeasurementEt>
	}

	if (SCD30_IS_READY) {
 8007462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800746a:	f7f9 fdc1 	bl	8000ff0 <HAL_GPIO_ReadPin>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	bf14      	ite	ne
 8007474:	2301      	movne	r3, #1
 8007476:	2300      	moveq	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <_Z13CO2SensorInitv+0x9c>
		osSemaphoreRelease(scd30ReadySemaphore);
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <_Z13CO2SensorInitv+0xa8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7fc fbb0 	bl	8003be8 <osSemaphoreRelease>
	}
}
 8007488:	bf00      	nop
 800748a:	3738      	adds	r7, #56	; 0x38
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	08008354 	.word	0x08008354
 8007494:	20000f18 	.word	0x20000f18
 8007498:	0800835c 	.word	0x0800835c
 800749c:	080074a9 	.word	0x080074a9
 80074a0:	20000f14 	.word	0x20000f14
 80074a4:	20000efc 	.word	0x20000efc

080074a8 <_Z11vCO2ReadoutPv>:

void vCO2Readout(void *pvParameters) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b098      	sub	sp, #96	; 0x60
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	6078      	str	r0, [r7, #4]

	uint32_t counter = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	657b      	str	r3, [r7, #84]	; 0x54
	char co2MessageBuffer[10];
	char tempMessageBuffer[10];
	char messageBuffer[30];

	for (;;) {
		osStatus_t status = osSemaphoreAcquire(scd30ReadySemaphore, portMAX_DELAY);
 80074b4:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <_Z11vCO2ReadoutPv+0xbc>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f04f 31ff 	mov.w	r1, #4294967295
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fc fb41 	bl	8003b44 <osSemaphoreAcquire>
 80074c2:	6538      	str	r0, [r7, #80]	; 0x50
		if (status == osOK) {
 80074c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d142      	bne.n	8007550 <_Z11vCO2ReadoutPv+0xa8>

			float co2, temp, hum;
			uint8_t i2cStatus = scd30.readMeasurements(&co2, &temp, &hum);
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	f107 0210 	add.w	r2, r7, #16
 80074d2:	f107 0114 	add.w	r1, r7, #20
 80074d6:	4824      	ldr	r0, [pc, #144]	; (8007568 <_Z11vCO2ReadoutPv+0xc0>)
 80074d8:	f000 f962 	bl	80077a0 <_ZN5Scd3016readMeasurementsEPfS0_S0_>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			if (i2cStatus != HAL_OK) {
 80074e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <_Z11vCO2ReadoutPv+0x50>
				sprintf(messageBuffer, "SCD - error");
 80074ea:	f107 0318 	add.w	r3, r7, #24
 80074ee:	491f      	ldr	r1, [pc, #124]	; (800756c <_Z11vCO2ReadoutPv+0xc4>)
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fb6f 	bl	8007bd4 <siprintf>
 80074f6:	e022      	b.n	800753e <_Z11vCO2ReadoutPv+0x96>
			} else {
				ftoa(co2, co2MessageBuffer, 1);
 80074f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80074fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007500:	2101      	movs	r1, #1
 8007502:	4618      	mov	r0, r3
 8007504:	eeb0 0a67 	vmov.f32	s0, s15
 8007508:	f7ff fe48 	bl	800719c <ftoa>
				ftoa(temp, tempMessageBuffer, 1);
 800750c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	eeb0 0a67 	vmov.f32	s0, s15
 800751c:	f7ff fe3e 	bl	800719c <ftoa>
				sprintf(messageBuffer, "C%s T%s %lu", co2MessageBuffer, tempMessageBuffer, ++counter);
 8007520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007522:	3301      	adds	r3, #1
 8007524:	657b      	str	r3, [r7, #84]	; 0x54
 8007526:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800752a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800752e:	f107 0018 	add.w	r0, r7, #24
 8007532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	460b      	mov	r3, r1
 8007538:	490d      	ldr	r1, [pc, #52]	; (8007570 <_Z11vCO2ReadoutPv+0xc8>)
 800753a:	f000 fb4b 	bl	8007bd4 <siprintf>
			}

			osMessageQueuePut(sensorReadoutsQueue, (uint8_t *) messageBuffer, 0, 0);
 800753e:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <_Z11vCO2ReadoutPv+0xcc>)
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f107 0118 	add.w	r1, r7, #24
 8007546:	2300      	movs	r3, #0
 8007548:	2200      	movs	r2, #0
 800754a:	f7fc fc05 	bl	8003d58 <osMessageQueuePut>
 800754e:	e7b1      	b.n	80074b4 <_Z11vCO2ReadoutPv+0xc>

		} else if (status != osErrorTimeout) {
 8007550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007552:	f113 0f02 	cmn.w	r3, #2
 8007556:	d0ad      	beq.n	80074b4 <_Z11vCO2ReadoutPv+0xc>
			osDelay(5000 / portTICK_RATE_MS);
 8007558:	f241 3088 	movw	r0, #5000	; 0x1388
 800755c:	f7fc fa4e 	bl	80039fc <osDelay>
		}
	}
 8007560:	e7a8      	b.n	80074b4 <_Z11vCO2ReadoutPv+0xc>
 8007562:	bf00      	nop
 8007564:	20000f18 	.word	0x20000f18
 8007568:	20000efc 	.word	0x20000efc
 800756c:	0800836c 	.word	0x0800836c
 8007570:	08008378 	.word	0x08008378
 8007574:	20000ef8 	.word	0x20000ef8

08007578 <_Z27SCD30ReadyInterrupedHandlerv>:
}

void SCD30ReadyInterrupedHandler() {
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
	if (scd30ReadySemaphore != NULL) {
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <_Z27SCD30ReadyInterrupedHandlerv+0x1c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <_Z27SCD30ReadyInterrupedHandlerv+0x16>
		osSemaphoreRelease(scd30ReadySemaphore);
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <_Z27SCD30ReadyInterrupedHandlerv+0x1c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f7fc fb2d 	bl	8003be8 <osSemaphoreRelease>
	}
}
 800758e:	bf00      	nop
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000f18 	.word	0x20000f18

08007598 <_Z41__static_initialization_and_destruction_0ii>:
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d108      	bne.n	80075ba <_Z41__static_initialization_and_destruction_0ii+0x22>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d103      	bne.n	80075ba <_Z41__static_initialization_and_destruction_0ii+0x22>
Scd30 scd30(hi2c1);
 80075b2:	4904      	ldr	r1, [pc, #16]	; (80075c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80075b4:	4804      	ldr	r0, [pc, #16]	; (80075c8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80075b6:	f7ff ff09 	bl	80073cc <_ZN5Scd30C1ER19__I2C_HandleTypeDef>
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000f28 	.word	0x20000f28
 80075c8:	20000efc 	.word	0x20000efc

080075cc <_GLOBAL__sub_I_scd30>:
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80075d4:	2001      	movs	r0, #1
 80075d6:	f7ff ffdf 	bl	8007598 <_Z41__static_initialization_and_destruction_0ii>
 80075da:	bd80      	pop	{r7, pc}

080075dc <_ZN5Scd3011computeCRC8EPh>:
 *      Author: Chipotle
 */

#include "Sensors/Devices/Scd30.hpp"

uint8_t Scd30::computeCRC8(uint8_t *data) {
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xFF; //Init with 0xFF
 80075e6:	23ff      	movs	r3, #255	; 0xff
 80075e8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t x = 0; x < 2; x++) {
 80075ea:	2300      	movs	r3, #0
 80075ec:	73bb      	strb	r3, [r7, #14]
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d822      	bhi.n	800763a <_ZN5Scd3011computeCRC8EPh+0x5e>
		crc ^= data[x]; // XOR-in the next input byte
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	4053      	eors	r3, r2
 8007600:	73fb      	strb	r3, [r7, #15]

		for (uint8_t i = 0; i < 8; i++) {
 8007602:	2300      	movs	r3, #0
 8007604:	737b      	strb	r3, [r7, #13]
 8007606:	7b7b      	ldrb	r3, [r7, #13]
 8007608:	2b07      	cmp	r3, #7
 800760a:	d812      	bhi.n	8007632 <_ZN5Scd3011computeCRC8EPh+0x56>
			if ((crc & 0x80) != 0)
 800760c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007610:	2b00      	cmp	r3, #0
 8007612:	da07      	bge.n	8007624 <_ZN5Scd3011computeCRC8EPh+0x48>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	b25b      	sxtb	r3, r3
 800761a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800761e:	b25b      	sxtb	r3, r3
 8007620:	73fb      	strb	r3, [r7, #15]
 8007622:	e002      	b.n	800762a <_ZN5Scd3011computeCRC8EPh+0x4e>
			else
				crc <<= 1;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < 8; i++) {
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	3301      	adds	r3, #1
 800762e:	737b      	strb	r3, [r7, #13]
 8007630:	e7e9      	b.n	8007606 <_ZN5Scd3011computeCRC8EPh+0x2a>
	for (uint8_t x = 0; x < 2; x++) {
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	3301      	adds	r3, #1
 8007636:	73bb      	strb	r3, [r7, #14]
 8007638:	e7d9      	b.n	80075ee <_ZN5Scd3011computeCRC8EPh+0x12>
		}
	}

	return crc;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <_ZN5Scd3011sendCommandEtt>:
}

/**
 * Send 2-byte command with 2-byte arguments.
 */
uint8_t Scd30::sendCommand(uint16_t command, uint16_t argument) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af04      	add	r7, sp, #16
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	807b      	strh	r3, [r7, #2]
 8007654:	4613      	mov	r3, r2
 8007656:	803b      	strh	r3, [r7, #0]
	buffer[0] = argument >> 8;
 8007658:	883b      	ldrh	r3, [r7, #0]
 800765a:	121b      	asrs	r3, r3, #8
 800765c:	b2da      	uxtb	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	711a      	strb	r2, [r3, #4]
	buffer[1] = (uint8_t) argument;
 8007662:	883b      	ldrh	r3, [r7, #0]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	715a      	strb	r2, [r3, #5]
	buffer[2] = computeCRC8(buffer);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ffb3 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	719a      	strb	r2, [r3, #6]

	return HAL_I2C_Mem_Write(&hi2c, SCD30_SLAVE_ADDRESS, command, 2, buffer, 3, SCD30_MAX_DELAY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3304      	adds	r3, #4
 8007686:	887a      	ldrh	r2, [r7, #2]
 8007688:	21a0      	movs	r1, #160	; 0xa0
 800768a:	9102      	str	r1, [sp, #8]
 800768c:	2103      	movs	r1, #3
 800768e:	9101      	str	r1, [sp, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	2302      	movs	r3, #2
 8007694:	21c2      	movs	r1, #194	; 0xc2
 8007696:	f7f9 ffb5 	bl	8001604 <HAL_I2C_Mem_Write>
 800769a:	4603      	mov	r3, r0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <_ZN5Scd3011readCommandEth>:

/**
 * Send 2-byte command and read response into the buffer.
 * For some reason SCD30 doesn't work well with HAL_I2C_Mem_Read. Use separate HAL_I2C_Master_Transmit and HAL_I2C_Master_Receive instead.
 */
uint8_t Scd30::readCommand(uint16_t command, uint8_t dataSize) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	807b      	strh	r3, [r7, #2]
 80076b0:	4613      	mov	r3, r2
 80076b2:	707b      	strb	r3, [r7, #1]
	buffer[0] = command >> 8;
 80076b4:	887b      	ldrh	r3, [r7, #2]
 80076b6:	121b      	asrs	r3, r3, #8
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	711a      	strb	r2, [r3, #4]
	buffer[1] = command;
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	715a      	strb	r2, [r3, #5]
	uint8_t i2cStatus = HAL_I2C_Master_Transmit(&hi2c, SCD30_SLAVE_ADDRESS, buffer, 2, SCD30_MAX_DELAY);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	1d1a      	adds	r2, r3, #4
 80076ce:	23a0      	movs	r3, #160	; 0xa0
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	2302      	movs	r3, #2
 80076d4:	21c2      	movs	r1, #194	; 0xc2
 80076d6:	f7f9 fdab 	bl	8001230 <HAL_I2C_Master_Transmit>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]

	if (i2cStatus != HAL_OK) {
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d019      	beq.n	8007718 <_ZN5Scd3011readCommandEth+0x74>

		if (__HAL_I2C_GET_FLAG(&hi2c, I2C_FLAG_BUSY) == SET) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f4:	bf0c      	ite	eq
 80076f6:	2301      	moveq	r3, #1
 80076f8:	2300      	movne	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <_ZN5Scd3011readCommandEth+0x70>
			// recover from SCD30 communication failure
			HAL_I2C_DeInit(&hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7f9 fd64 	bl	80011d2 <HAL_I2C_DeInit>
			HAL_I2C_Init(&hi2c);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f7f9 fcd0 	bl	80010b4 <HAL_I2C_Init>
		}

		return i2cStatus;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	e00c      	b.n	8007732 <_ZN5Scd3011readCommandEth+0x8e>
	}

	//HAL_Delay(1);

	return HAL_I2C_Master_Receive(&hi2c, SCD30_SLAVE_ADDRESS, buffer, dataSize, SCD30_MAX_DELAY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	787b      	ldrb	r3, [r7, #1]
 8007722:	b29b      	uxth	r3, r3
 8007724:	21a0      	movs	r1, #160	; 0xa0
 8007726:	9100      	str	r1, [sp, #0]
 8007728:	21c2      	movs	r1, #194	; 0xc2
 800772a:	f7f9 fe75 	bl	8001418 <HAL_I2C_Master_Receive>
 800772e:	4603      	mov	r3, r0
 8007730:	bf00      	nop
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <_ZN5Scd3022setMeasurementIntervalEt>:

uint8_t Scd30::setMeasurementInterval(uint16_t interval) {
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	807b      	strh	r3, [r7, #2]
	return sendCommand(SCD30_SET_MEASUREMENT_INTERVAL, interval);
 8007746:	887b      	ldrh	r3, [r7, #2]
 8007748:	461a      	mov	r2, r3
 800774a:	f44f 418c 	mov.w	r1, #17920	; 0x4600
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff ff7a 	bl	8007648 <_ZN5Scd3011sendCommandEtt>
 8007754:	4603      	mov	r3, r0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <_ZN5Scd3025startContinousMeasurementEt>:

uint8_t Scd30::startContinousMeasurement(uint16_t pressure) {
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	807b      	strh	r3, [r7, #2]
	return sendCommand(SCD30_START_CONTINOUS_MEASUREMENT, pressure);
 800776a:	887b      	ldrh	r3, [r7, #2]
 800776c:	461a      	mov	r2, r3
 800776e:	2110      	movs	r1, #16
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ff69 	bl	8007648 <_ZN5Scd3011sendCommandEtt>
 8007776:	4603      	mov	r3, r0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <_ZN5Scd304initEt>:

uint8_t Scd30::stopContinousMeasurement() {
	return sendCommand(SCD30_STOP_CONTINOUS_MEASUREMENT);
}

uint8_t Scd30::init(uint16_t measurementInterval) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	807b      	strh	r3, [r7, #2]
	return setMeasurementInterval(measurementInterval);
 800778c:	887b      	ldrh	r3, [r7, #2]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ffd2 	bl	800773a <_ZN5Scd3022setMeasurementIntervalEt>
 8007796:	4603      	mov	r3, r0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <_ZN5Scd3016readMeasurementsEPfS0_S0_>:
	*ready = buffer[1] == 1;

	return HAL_OK;
}

uint8_t Scd30::readMeasurements(float *co2, float *temperature, float *humidity) {
 80077a0:	b590      	push	{r4, r7, lr}
 80077a2:	b089      	sub	sp, #36	; 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
	uint8_t i2cStatus = readCommand(SCD30_READ_MEASUREMENT, 18);
 80077ae:	2212      	movs	r2, #18
 80077b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff ff75 	bl	80076a4 <_ZN5Scd3011readCommandEth>
 80077ba:	4603      	mov	r3, r0
 80077bc:	77fb      	strb	r3, [r7, #31]

	if (i2cStatus != HAL_OK) {
 80077be:	7ffb      	ldrb	r3, [r7, #31]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0x28>
		return i2cStatus;
 80077c4:	7ffb      	ldrb	r3, [r7, #31]
 80077c6:	e08a      	b.n	80078de <_ZN5Scd3016readMeasurementsEPfS0_S0_+0x13e>
	}

	if (buffer[2] != computeCRC8(buffer) || buffer[5] != computeCRC8(buffer + 3) || buffer[8] != computeCRC8(buffer + 6)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	799c      	ldrb	r4, [r3, #6]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff ff02 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 80077d8:	4603      	mov	r3, r0
			|| buffer[11] != computeCRC8(buffer + 9) || buffer[14] != computeCRC8(buffer + 12) || buffer[17] != computeCRC8(buffer + 15)) {
 80077da:	429c      	cmp	r4, r3
 80077dc:	d13b      	bne.n	8007856 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xb6>
	if (buffer[2] != computeCRC8(buffer) || buffer[5] != computeCRC8(buffer + 3) || buffer[8] != computeCRC8(buffer + 6)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7a5c      	ldrb	r4, [r3, #9]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3304      	adds	r3, #4
 80077e6:	3303      	adds	r3, #3
 80077e8:	4619      	mov	r1, r3
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff fef6 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 80077f0:	4603      	mov	r3, r0
 80077f2:	429c      	cmp	r4, r3
 80077f4:	d12f      	bne.n	8007856 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xb6>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	7b1c      	ldrb	r4, [r3, #12]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3304      	adds	r3, #4
 80077fe:	3306      	adds	r3, #6
 8007800:	4619      	mov	r1, r3
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff feea 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 8007808:	4603      	mov	r3, r0
 800780a:	429c      	cmp	r4, r3
 800780c:	d123      	bne.n	8007856 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xb6>
			|| buffer[11] != computeCRC8(buffer + 9) || buffer[14] != computeCRC8(buffer + 12) || buffer[17] != computeCRC8(buffer + 15)) {
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	7bdc      	ldrb	r4, [r3, #15]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3304      	adds	r3, #4
 8007816:	3309      	adds	r3, #9
 8007818:	4619      	mov	r1, r3
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff fede 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 8007820:	4603      	mov	r3, r0
 8007822:	429c      	cmp	r4, r3
 8007824:	d117      	bne.n	8007856 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xb6>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	7c9c      	ldrb	r4, [r3, #18]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3304      	adds	r3, #4
 800782e:	330c      	adds	r3, #12
 8007830:	4619      	mov	r1, r3
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fed2 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 8007838:	4603      	mov	r3, r0
 800783a:	429c      	cmp	r4, r3
 800783c:	d10b      	bne.n	8007856 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xb6>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	7d5c      	ldrb	r4, [r3, #21]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3304      	adds	r3, #4
 8007846:	330f      	adds	r3, #15
 8007848:	4619      	mov	r1, r3
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fec6 	bl	80075dc <_ZN5Scd3011computeCRC8EPh>
 8007850:	4603      	mov	r3, r0
 8007852:	429c      	cmp	r4, r3
 8007854:	d001      	beq.n	800785a <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xba>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xbc>
 800785a:	2300      	movs	r3, #0
	if (buffer[2] != computeCRC8(buffer) || buffer[5] != computeCRC8(buffer + 3) || buffer[8] != computeCRC8(buffer + 6)
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <_ZN5Scd3016readMeasurementsEPfS0_S0_+0xc4>
		return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e03c      	b.n	80078de <_ZN5Scd3016readMeasurementsEPfS0_S0_+0x13e>
	}

	uint32_t co2Raw = buffer[0] << 24 | buffer[1] << 16 | buffer[3] << 8 | buffer[4];
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	061a      	lsls	r2, r3, #24
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	795b      	ldrb	r3, [r3, #5]
 800786e:	041b      	lsls	r3, r3, #16
 8007870:	431a      	orrs	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	79db      	ldrb	r3, [r3, #7]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	4313      	orrs	r3, r2
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	7a12      	ldrb	r2, [r2, #8]
 800787e:	4313      	orrs	r3, r2
 8007880:	61bb      	str	r3, [r7, #24]
	uint32_t temperatureRaw = buffer[6] << 24 | buffer[7] << 16 | buffer[9] << 8 | buffer[10];
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	7a9b      	ldrb	r3, [r3, #10]
 8007886:	061a      	lsls	r2, r3, #24
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7adb      	ldrb	r3, [r3, #11]
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	431a      	orrs	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7b5b      	ldrb	r3, [r3, #13]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	4313      	orrs	r3, r2
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	7b92      	ldrb	r2, [r2, #14]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]
	uint32_t humidityRaw = buffer[12] << 24 | buffer[13] << 16 | buffer[15] << 8 | buffer[16];
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	7c1b      	ldrb	r3, [r3, #16]
 80078a4:	061a      	lsls	r2, r3, #24
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	7c5b      	ldrb	r3, [r3, #17]
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	431a      	orrs	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	7cdb      	ldrb	r3, [r3, #19]
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	4313      	orrs	r3, r2
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	7d12      	ldrb	r2, [r2, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]

	*co2 = *((float*) &co2Raw);
 80078be:	f107 0318 	add.w	r3, r7, #24
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	601a      	str	r2, [r3, #0]
	*temperature = *((float*) &temperatureRaw);
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
	*humidity = *((float*) &humidityRaw);
 80078d2:	f107 0310 	add.w	r3, r7, #16
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3724      	adds	r7, #36	; 0x24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd90      	pop	{r4, r7, pc}
	...

080078e8 <__errno>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	; (80078f0 <__errno+0x8>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000010 	.word	0x20000010

080078f4 <__libc_init_array>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d0d      	ldr	r5, [pc, #52]	; (800792c <__libc_init_array+0x38>)
 80078f8:	4c0d      	ldr	r4, [pc, #52]	; (8007930 <__libc_init_array+0x3c>)
 80078fa:	1b64      	subs	r4, r4, r5
 80078fc:	10a4      	asrs	r4, r4, #2
 80078fe:	2600      	movs	r6, #0
 8007900:	42a6      	cmp	r6, r4
 8007902:	d109      	bne.n	8007918 <__libc_init_array+0x24>
 8007904:	4d0b      	ldr	r5, [pc, #44]	; (8007934 <__libc_init_array+0x40>)
 8007906:	4c0c      	ldr	r4, [pc, #48]	; (8007938 <__libc_init_array+0x44>)
 8007908:	f000 fcc8 	bl	800829c <_init>
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	2600      	movs	r6, #0
 8007912:	42a6      	cmp	r6, r4
 8007914:	d105      	bne.n	8007922 <__libc_init_array+0x2e>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	f855 3b04 	ldr.w	r3, [r5], #4
 800791c:	4798      	blx	r3
 800791e:	3601      	adds	r6, #1
 8007920:	e7ee      	b.n	8007900 <__libc_init_array+0xc>
 8007922:	f855 3b04 	ldr.w	r3, [r5], #4
 8007926:	4798      	blx	r3
 8007928:	3601      	adds	r6, #1
 800792a:	e7f2      	b.n	8007912 <__libc_init_array+0x1e>
 800792c:	08008708 	.word	0x08008708
 8007930:	08008708 	.word	0x08008708
 8007934:	08008708 	.word	0x08008708
 8007938:	08008714 	.word	0x08008714

0800793c <__retarget_lock_acquire_recursive>:
 800793c:	4770      	bx	lr

0800793e <__retarget_lock_release_recursive>:
 800793e:	4770      	bx	lr

08007940 <malloc>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <malloc+0xc>)
 8007942:	4601      	mov	r1, r0
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f000 b871 	b.w	8007a2c <_malloc_r>
 800794a:	bf00      	nop
 800794c:	20000010 	.word	0x20000010

08007950 <free>:
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <free+0xc>)
 8007952:	4601      	mov	r1, r0
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	f000 b819 	b.w	800798c <_free_r>
 800795a:	bf00      	nop
 800795c:	20000010 	.word	0x20000010

08007960 <memcpy>:
 8007960:	440a      	add	r2, r1
 8007962:	4291      	cmp	r1, r2
 8007964:	f100 33ff 	add.w	r3, r0, #4294967295
 8007968:	d100      	bne.n	800796c <memcpy+0xc>
 800796a:	4770      	bx	lr
 800796c:	b510      	push	{r4, lr}
 800796e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007976:	4291      	cmp	r1, r2
 8007978:	d1f9      	bne.n	800796e <memcpy+0xe>
 800797a:	bd10      	pop	{r4, pc}

0800797c <memset>:
 800797c:	4402      	add	r2, r0
 800797e:	4603      	mov	r3, r0
 8007980:	4293      	cmp	r3, r2
 8007982:	d100      	bne.n	8007986 <memset+0xa>
 8007984:	4770      	bx	lr
 8007986:	f803 1b01 	strb.w	r1, [r3], #1
 800798a:	e7f9      	b.n	8007980 <memset+0x4>

0800798c <_free_r>:
 800798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798e:	2900      	cmp	r1, #0
 8007990:	d048      	beq.n	8007a24 <_free_r+0x98>
 8007992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007996:	9001      	str	r0, [sp, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f1a1 0404 	sub.w	r4, r1, #4
 800799e:	bfb8      	it	lt
 80079a0:	18e4      	addlt	r4, r4, r3
 80079a2:	f000 f937 	bl	8007c14 <__malloc_lock>
 80079a6:	4a20      	ldr	r2, [pc, #128]	; (8007a28 <_free_r+0x9c>)
 80079a8:	9801      	ldr	r0, [sp, #4]
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	4615      	mov	r5, r2
 80079ae:	b933      	cbnz	r3, 80079be <_free_r+0x32>
 80079b0:	6063      	str	r3, [r4, #4]
 80079b2:	6014      	str	r4, [r2, #0]
 80079b4:	b003      	add	sp, #12
 80079b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ba:	f000 b931 	b.w	8007c20 <__malloc_unlock>
 80079be:	42a3      	cmp	r3, r4
 80079c0:	d90b      	bls.n	80079da <_free_r+0x4e>
 80079c2:	6821      	ldr	r1, [r4, #0]
 80079c4:	1862      	adds	r2, r4, r1
 80079c6:	4293      	cmp	r3, r2
 80079c8:	bf04      	itt	eq
 80079ca:	681a      	ldreq	r2, [r3, #0]
 80079cc:	685b      	ldreq	r3, [r3, #4]
 80079ce:	6063      	str	r3, [r4, #4]
 80079d0:	bf04      	itt	eq
 80079d2:	1852      	addeq	r2, r2, r1
 80079d4:	6022      	streq	r2, [r4, #0]
 80079d6:	602c      	str	r4, [r5, #0]
 80079d8:	e7ec      	b.n	80079b4 <_free_r+0x28>
 80079da:	461a      	mov	r2, r3
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b10b      	cbz	r3, 80079e4 <_free_r+0x58>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d9fa      	bls.n	80079da <_free_r+0x4e>
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	1855      	adds	r5, r2, r1
 80079e8:	42a5      	cmp	r5, r4
 80079ea:	d10b      	bne.n	8007a04 <_free_r+0x78>
 80079ec:	6824      	ldr	r4, [r4, #0]
 80079ee:	4421      	add	r1, r4
 80079f0:	1854      	adds	r4, r2, r1
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	d1dd      	bne.n	80079b4 <_free_r+0x28>
 80079f8:	681c      	ldr	r4, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	4421      	add	r1, r4
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	e7d7      	b.n	80079b4 <_free_r+0x28>
 8007a04:	d902      	bls.n	8007a0c <_free_r+0x80>
 8007a06:	230c      	movs	r3, #12
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	e7d3      	b.n	80079b4 <_free_r+0x28>
 8007a0c:	6825      	ldr	r5, [r4, #0]
 8007a0e:	1961      	adds	r1, r4, r5
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf04      	itt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	bf04      	itt	eq
 8007a1c:	1949      	addeq	r1, r1, r5
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	6054      	str	r4, [r2, #4]
 8007a22:	e7c7      	b.n	80079b4 <_free_r+0x28>
 8007a24:	b003      	add	sp, #12
 8007a26:	bd30      	pop	{r4, r5, pc}
 8007a28:	20000f1c 	.word	0x20000f1c

08007a2c <_malloc_r>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	1ccd      	adds	r5, r1, #3
 8007a30:	f025 0503 	bic.w	r5, r5, #3
 8007a34:	3508      	adds	r5, #8
 8007a36:	2d0c      	cmp	r5, #12
 8007a38:	bf38      	it	cc
 8007a3a:	250c      	movcc	r5, #12
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	4606      	mov	r6, r0
 8007a40:	db01      	blt.n	8007a46 <_malloc_r+0x1a>
 8007a42:	42a9      	cmp	r1, r5
 8007a44:	d903      	bls.n	8007a4e <_malloc_r+0x22>
 8007a46:	230c      	movs	r3, #12
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4e:	f000 f8e1 	bl	8007c14 <__malloc_lock>
 8007a52:	4921      	ldr	r1, [pc, #132]	; (8007ad8 <_malloc_r+0xac>)
 8007a54:	680a      	ldr	r2, [r1, #0]
 8007a56:	4614      	mov	r4, r2
 8007a58:	b99c      	cbnz	r4, 8007a82 <_malloc_r+0x56>
 8007a5a:	4f20      	ldr	r7, [pc, #128]	; (8007adc <_malloc_r+0xb0>)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	b923      	cbnz	r3, 8007a6a <_malloc_r+0x3e>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f8a6 	bl	8007bb4 <_sbrk_r>
 8007a68:	6038      	str	r0, [r7, #0]
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 f8a1 	bl	8007bb4 <_sbrk_r>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d123      	bne.n	8007abe <_malloc_r+0x92>
 8007a76:	230c      	movs	r3, #12
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 f8d0 	bl	8007c20 <__malloc_unlock>
 8007a80:	e7e3      	b.n	8007a4a <_malloc_r+0x1e>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	1b5b      	subs	r3, r3, r5
 8007a86:	d417      	bmi.n	8007ab8 <_malloc_r+0x8c>
 8007a88:	2b0b      	cmp	r3, #11
 8007a8a:	d903      	bls.n	8007a94 <_malloc_r+0x68>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	441c      	add	r4, r3
 8007a90:	6025      	str	r5, [r4, #0]
 8007a92:	e004      	b.n	8007a9e <_malloc_r+0x72>
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	42a2      	cmp	r2, r4
 8007a98:	bf0c      	ite	eq
 8007a9a:	600b      	streq	r3, [r1, #0]
 8007a9c:	6053      	strne	r3, [r2, #4]
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 f8be 	bl	8007c20 <__malloc_unlock>
 8007aa4:	f104 000b 	add.w	r0, r4, #11
 8007aa8:	1d23      	adds	r3, r4, #4
 8007aaa:	f020 0007 	bic.w	r0, r0, #7
 8007aae:	1ac2      	subs	r2, r0, r3
 8007ab0:	d0cc      	beq.n	8007a4c <_malloc_r+0x20>
 8007ab2:	1a1b      	subs	r3, r3, r0
 8007ab4:	50a3      	str	r3, [r4, r2]
 8007ab6:	e7c9      	b.n	8007a4c <_malloc_r+0x20>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	6864      	ldr	r4, [r4, #4]
 8007abc:	e7cc      	b.n	8007a58 <_malloc_r+0x2c>
 8007abe:	1cc4      	adds	r4, r0, #3
 8007ac0:	f024 0403 	bic.w	r4, r4, #3
 8007ac4:	42a0      	cmp	r0, r4
 8007ac6:	d0e3      	beq.n	8007a90 <_malloc_r+0x64>
 8007ac8:	1a21      	subs	r1, r4, r0
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 f872 	bl	8007bb4 <_sbrk_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d1dd      	bne.n	8007a90 <_malloc_r+0x64>
 8007ad4:	e7cf      	b.n	8007a76 <_malloc_r+0x4a>
 8007ad6:	bf00      	nop
 8007ad8:	20000f1c 	.word	0x20000f1c
 8007adc:	20000f20 	.word	0x20000f20

08007ae0 <cleanup_glue>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	6809      	ldr	r1, [r1, #0]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	b109      	cbz	r1, 8007aee <cleanup_glue+0xe>
 8007aea:	f7ff fff9 	bl	8007ae0 <cleanup_glue>
 8007aee:	4621      	mov	r1, r4
 8007af0:	4628      	mov	r0, r5
 8007af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af6:	f7ff bf49 	b.w	800798c <_free_r>
	...

08007afc <_reclaim_reent>:
 8007afc:	4b2c      	ldr	r3, [pc, #176]	; (8007bb0 <_reclaim_reent+0xb4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4283      	cmp	r3, r0
 8007b02:	b570      	push	{r4, r5, r6, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	d051      	beq.n	8007bac <_reclaim_reent+0xb0>
 8007b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b0a:	b143      	cbz	r3, 8007b1e <_reclaim_reent+0x22>
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d14a      	bne.n	8007ba8 <_reclaim_reent+0xac>
 8007b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b14:	6819      	ldr	r1, [r3, #0]
 8007b16:	b111      	cbz	r1, 8007b1e <_reclaim_reent+0x22>
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f7ff ff37 	bl	800798c <_free_r>
 8007b1e:	6961      	ldr	r1, [r4, #20]
 8007b20:	b111      	cbz	r1, 8007b28 <_reclaim_reent+0x2c>
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff ff32 	bl	800798c <_free_r>
 8007b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b2a:	b111      	cbz	r1, 8007b32 <_reclaim_reent+0x36>
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7ff ff2d 	bl	800798c <_free_r>
 8007b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b34:	b111      	cbz	r1, 8007b3c <_reclaim_reent+0x40>
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7ff ff28 	bl	800798c <_free_r>
 8007b3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b3e:	b111      	cbz	r1, 8007b46 <_reclaim_reent+0x4a>
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7ff ff23 	bl	800798c <_free_r>
 8007b46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b48:	b111      	cbz	r1, 8007b50 <_reclaim_reent+0x54>
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f7ff ff1e 	bl	800798c <_free_r>
 8007b50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b52:	b111      	cbz	r1, 8007b5a <_reclaim_reent+0x5e>
 8007b54:	4620      	mov	r0, r4
 8007b56:	f7ff ff19 	bl	800798c <_free_r>
 8007b5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007b5c:	b111      	cbz	r1, 8007b64 <_reclaim_reent+0x68>
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f7ff ff14 	bl	800798c <_free_r>
 8007b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b66:	b111      	cbz	r1, 8007b6e <_reclaim_reent+0x72>
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7ff ff0f 	bl	800798c <_free_r>
 8007b6e:	69a3      	ldr	r3, [r4, #24]
 8007b70:	b1e3      	cbz	r3, 8007bac <_reclaim_reent+0xb0>
 8007b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b74:	4620      	mov	r0, r4
 8007b76:	4798      	blx	r3
 8007b78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b7a:	b1b9      	cbz	r1, 8007bac <_reclaim_reent+0xb0>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b82:	f7ff bfad 	b.w	8007ae0 <cleanup_glue>
 8007b86:	5949      	ldr	r1, [r1, r5]
 8007b88:	b941      	cbnz	r1, 8007b9c <_reclaim_reent+0xa0>
 8007b8a:	3504      	adds	r5, #4
 8007b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8e:	2d80      	cmp	r5, #128	; 0x80
 8007b90:	68d9      	ldr	r1, [r3, #12]
 8007b92:	d1f8      	bne.n	8007b86 <_reclaim_reent+0x8a>
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff fef9 	bl	800798c <_free_r>
 8007b9a:	e7ba      	b.n	8007b12 <_reclaim_reent+0x16>
 8007b9c:	680e      	ldr	r6, [r1, #0]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff fef4 	bl	800798c <_free_r>
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	e7ef      	b.n	8007b88 <_reclaim_reent+0x8c>
 8007ba8:	2500      	movs	r5, #0
 8007baa:	e7ef      	b.n	8007b8c <_reclaim_reent+0x90>
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000010 	.word	0x20000010

08007bb4 <_sbrk_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_sbrk_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7f8 fe12 	bl	80007e8 <_sbrk>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_sbrk_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_sbrk_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20001014 	.word	0x20001014

08007bd4 <siprintf>:
 8007bd4:	b40e      	push	{r1, r2, r3}
 8007bd6:	b500      	push	{lr}
 8007bd8:	b09c      	sub	sp, #112	; 0x70
 8007bda:	ab1d      	add	r3, sp, #116	; 0x74
 8007bdc:	9002      	str	r0, [sp, #8]
 8007bde:	9006      	str	r0, [sp, #24]
 8007be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007be4:	4809      	ldr	r0, [pc, #36]	; (8007c0c <siprintf+0x38>)
 8007be6:	9107      	str	r1, [sp, #28]
 8007be8:	9104      	str	r1, [sp, #16]
 8007bea:	4909      	ldr	r1, [pc, #36]	; (8007c10 <siprintf+0x3c>)
 8007bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf0:	9105      	str	r1, [sp, #20]
 8007bf2:	6800      	ldr	r0, [r0, #0]
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	a902      	add	r1, sp, #8
 8007bf8:	f000 f874 	bl	8007ce4 <_svfiprintf_r>
 8007bfc:	9b02      	ldr	r3, [sp, #8]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	b01c      	add	sp, #112	; 0x70
 8007c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c08:	b003      	add	sp, #12
 8007c0a:	4770      	bx	lr
 8007c0c:	20000010 	.word	0x20000010
 8007c10:	ffff0208 	.word	0xffff0208

08007c14 <__malloc_lock>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__malloc_lock+0x8>)
 8007c16:	f7ff be91 	b.w	800793c <__retarget_lock_acquire_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	2000100c 	.word	0x2000100c

08007c20 <__malloc_unlock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__malloc_unlock+0x8>)
 8007c22:	f7ff be8c 	b.w	800793e <__retarget_lock_release_recursive>
 8007c26:	bf00      	nop
 8007c28:	2000100c 	.word	0x2000100c

08007c2c <__ssputs_r>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	688e      	ldr	r6, [r1, #8]
 8007c32:	429e      	cmp	r6, r3
 8007c34:	4682      	mov	sl, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4690      	mov	r8, r2
 8007c3a:	461f      	mov	r7, r3
 8007c3c:	d838      	bhi.n	8007cb0 <__ssputs_r+0x84>
 8007c3e:	898a      	ldrh	r2, [r1, #12]
 8007c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c44:	d032      	beq.n	8007cac <__ssputs_r+0x80>
 8007c46:	6825      	ldr	r5, [r4, #0]
 8007c48:	6909      	ldr	r1, [r1, #16]
 8007c4a:	eba5 0901 	sub.w	r9, r5, r1
 8007c4e:	6965      	ldr	r5, [r4, #20]
 8007c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c58:	3301      	adds	r3, #1
 8007c5a:	444b      	add	r3, r9
 8007c5c:	106d      	asrs	r5, r5, #1
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	bf38      	it	cc
 8007c62:	461d      	movcc	r5, r3
 8007c64:	0553      	lsls	r3, r2, #21
 8007c66:	d531      	bpl.n	8007ccc <__ssputs_r+0xa0>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7ff fedf 	bl	8007a2c <_malloc_r>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	b950      	cbnz	r0, 8007c88 <__ssputs_r+0x5c>
 8007c72:	230c      	movs	r3, #12
 8007c74:	f8ca 3000 	str.w	r3, [sl]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c88:	6921      	ldr	r1, [r4, #16]
 8007c8a:	464a      	mov	r2, r9
 8007c8c:	f7ff fe68 	bl	8007960 <memcpy>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	6126      	str	r6, [r4, #16]
 8007c9e:	6165      	str	r5, [r4, #20]
 8007ca0:	444e      	add	r6, r9
 8007ca2:	eba5 0509 	sub.w	r5, r5, r9
 8007ca6:	6026      	str	r6, [r4, #0]
 8007ca8:	60a5      	str	r5, [r4, #8]
 8007caa:	463e      	mov	r6, r7
 8007cac:	42be      	cmp	r6, r7
 8007cae:	d900      	bls.n	8007cb2 <__ssputs_r+0x86>
 8007cb0:	463e      	mov	r6, r7
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	f000 faa8 	bl	800820c <memmove>
 8007cbc:	68a3      	ldr	r3, [r4, #8]
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	1b9b      	subs	r3, r3, r6
 8007cc2:	4432      	add	r2, r6
 8007cc4:	60a3      	str	r3, [r4, #8]
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	2000      	movs	r0, #0
 8007cca:	e7db      	b.n	8007c84 <__ssputs_r+0x58>
 8007ccc:	462a      	mov	r2, r5
 8007cce:	f000 fab7 	bl	8008240 <_realloc_r>
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d1e1      	bne.n	8007c9c <__ssputs_r+0x70>
 8007cd8:	6921      	ldr	r1, [r4, #16]
 8007cda:	4650      	mov	r0, sl
 8007cdc:	f7ff fe56 	bl	800798c <_free_r>
 8007ce0:	e7c7      	b.n	8007c72 <__ssputs_r+0x46>
	...

08007ce4 <_svfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	4698      	mov	r8, r3
 8007cea:	898b      	ldrh	r3, [r1, #12]
 8007cec:	061b      	lsls	r3, r3, #24
 8007cee:	b09d      	sub	sp, #116	; 0x74
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	d50e      	bpl.n	8007d16 <_svfiprintf_r+0x32>
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	b963      	cbnz	r3, 8007d16 <_svfiprintf_r+0x32>
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	f7ff fe95 	bl	8007a2c <_malloc_r>
 8007d02:	6028      	str	r0, [r5, #0]
 8007d04:	6128      	str	r0, [r5, #16]
 8007d06:	b920      	cbnz	r0, 8007d12 <_svfiprintf_r+0x2e>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e0d1      	b.n	8007eb6 <_svfiprintf_r+0x1d2>
 8007d12:	2340      	movs	r3, #64	; 0x40
 8007d14:	616b      	str	r3, [r5, #20]
 8007d16:	2300      	movs	r3, #0
 8007d18:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1a:	2320      	movs	r3, #32
 8007d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d24:	2330      	movs	r3, #48	; 0x30
 8007d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ed0 <_svfiprintf_r+0x1ec>
 8007d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d2e:	f04f 0901 	mov.w	r9, #1
 8007d32:	4623      	mov	r3, r4
 8007d34:	469a      	mov	sl, r3
 8007d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3a:	b10a      	cbz	r2, 8007d40 <_svfiprintf_r+0x5c>
 8007d3c:	2a25      	cmp	r2, #37	; 0x25
 8007d3e:	d1f9      	bne.n	8007d34 <_svfiprintf_r+0x50>
 8007d40:	ebba 0b04 	subs.w	fp, sl, r4
 8007d44:	d00b      	beq.n	8007d5e <_svfiprintf_r+0x7a>
 8007d46:	465b      	mov	r3, fp
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff ff6d 	bl	8007c2c <__ssputs_r>
 8007d52:	3001      	adds	r0, #1
 8007d54:	f000 80aa 	beq.w	8007eac <_svfiprintf_r+0x1c8>
 8007d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d5a:	445a      	add	r2, fp
 8007d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 80a2 	beq.w	8007eac <_svfiprintf_r+0x1c8>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d72:	f10a 0a01 	add.w	sl, sl, #1
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	9307      	str	r3, [sp, #28]
 8007d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d80:	4654      	mov	r4, sl
 8007d82:	2205      	movs	r2, #5
 8007d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d88:	4851      	ldr	r0, [pc, #324]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007d8a:	f7f8 fa29 	bl	80001e0 <memchr>
 8007d8e:	9a04      	ldr	r2, [sp, #16]
 8007d90:	b9d8      	cbnz	r0, 8007dca <_svfiprintf_r+0xe6>
 8007d92:	06d0      	lsls	r0, r2, #27
 8007d94:	bf44      	itt	mi
 8007d96:	2320      	movmi	r3, #32
 8007d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d9c:	0711      	lsls	r1, r2, #28
 8007d9e:	bf44      	itt	mi
 8007da0:	232b      	movmi	r3, #43	; 0x2b
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da6:	f89a 3000 	ldrb.w	r3, [sl]
 8007daa:	2b2a      	cmp	r3, #42	; 0x2a
 8007dac:	d015      	beq.n	8007dda <_svfiprintf_r+0xf6>
 8007dae:	9a07      	ldr	r2, [sp, #28]
 8007db0:	4654      	mov	r4, sl
 8007db2:	2000      	movs	r0, #0
 8007db4:	f04f 0c0a 	mov.w	ip, #10
 8007db8:	4621      	mov	r1, r4
 8007dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dbe:	3b30      	subs	r3, #48	; 0x30
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	d94e      	bls.n	8007e62 <_svfiprintf_r+0x17e>
 8007dc4:	b1b0      	cbz	r0, 8007df4 <_svfiprintf_r+0x110>
 8007dc6:	9207      	str	r2, [sp, #28]
 8007dc8:	e014      	b.n	8007df4 <_svfiprintf_r+0x110>
 8007dca:	eba0 0308 	sub.w	r3, r0, r8
 8007dce:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	9304      	str	r3, [sp, #16]
 8007dd6:	46a2      	mov	sl, r4
 8007dd8:	e7d2      	b.n	8007d80 <_svfiprintf_r+0x9c>
 8007dda:	9b03      	ldr	r3, [sp, #12]
 8007ddc:	1d19      	adds	r1, r3, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	9103      	str	r1, [sp, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfbb      	ittet	lt
 8007de6:	425b      	neglt	r3, r3
 8007de8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dec:	9307      	strge	r3, [sp, #28]
 8007dee:	9307      	strlt	r3, [sp, #28]
 8007df0:	bfb8      	it	lt
 8007df2:	9204      	strlt	r2, [sp, #16]
 8007df4:	7823      	ldrb	r3, [r4, #0]
 8007df6:	2b2e      	cmp	r3, #46	; 0x2e
 8007df8:	d10c      	bne.n	8007e14 <_svfiprintf_r+0x130>
 8007dfa:	7863      	ldrb	r3, [r4, #1]
 8007dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfe:	d135      	bne.n	8007e6c <_svfiprintf_r+0x188>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	1d1a      	adds	r2, r3, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	9203      	str	r2, [sp, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bfb8      	it	lt
 8007e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e10:	3402      	adds	r4, #2
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ee0 <_svfiprintf_r+0x1fc>
 8007e18:	7821      	ldrb	r1, [r4, #0]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	f7f8 f9df 	bl	80001e0 <memchr>
 8007e22:	b140      	cbz	r0, 8007e36 <_svfiprintf_r+0x152>
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	eba0 000a 	sub.w	r0, r0, sl
 8007e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	4303      	orrs	r3, r0
 8007e32:	3401      	adds	r4, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e3a:	4826      	ldr	r0, [pc, #152]	; (8007ed4 <_svfiprintf_r+0x1f0>)
 8007e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e40:	2206      	movs	r2, #6
 8007e42:	f7f8 f9cd 	bl	80001e0 <memchr>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d038      	beq.n	8007ebc <_svfiprintf_r+0x1d8>
 8007e4a:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <_svfiprintf_r+0x1f4>)
 8007e4c:	bb1b      	cbnz	r3, 8007e96 <_svfiprintf_r+0x1b2>
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	3307      	adds	r3, #7
 8007e52:	f023 0307 	bic.w	r3, r3, #7
 8007e56:	3308      	adds	r3, #8
 8007e58:	9303      	str	r3, [sp, #12]
 8007e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5c:	4433      	add	r3, r6
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	e767      	b.n	8007d32 <_svfiprintf_r+0x4e>
 8007e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e66:	460c      	mov	r4, r1
 8007e68:	2001      	movs	r0, #1
 8007e6a:	e7a5      	b.n	8007db8 <_svfiprintf_r+0xd4>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	3401      	adds	r4, #1
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	4619      	mov	r1, r3
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e7e:	3a30      	subs	r2, #48	; 0x30
 8007e80:	2a09      	cmp	r2, #9
 8007e82:	d903      	bls.n	8007e8c <_svfiprintf_r+0x1a8>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0c5      	beq.n	8007e14 <_svfiprintf_r+0x130>
 8007e88:	9105      	str	r1, [sp, #20]
 8007e8a:	e7c3      	b.n	8007e14 <_svfiprintf_r+0x130>
 8007e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e90:	4604      	mov	r4, r0
 8007e92:	2301      	movs	r3, #1
 8007e94:	e7f0      	b.n	8007e78 <_svfiprintf_r+0x194>
 8007e96:	ab03      	add	r3, sp, #12
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <_svfiprintf_r+0x1f8>)
 8007e9e:	a904      	add	r1, sp, #16
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f3af 8000 	nop.w
 8007ea6:	1c42      	adds	r2, r0, #1
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	d1d6      	bne.n	8007e5a <_svfiprintf_r+0x176>
 8007eac:	89ab      	ldrh	r3, [r5, #12]
 8007eae:	065b      	lsls	r3, r3, #25
 8007eb0:	f53f af2c 	bmi.w	8007d0c <_svfiprintf_r+0x28>
 8007eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eb6:	b01d      	add	sp, #116	; 0x74
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	ab03      	add	r3, sp, #12
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4b06      	ldr	r3, [pc, #24]	; (8007edc <_svfiprintf_r+0x1f8>)
 8007ec4:	a904      	add	r1, sp, #16
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f000 f87a 	bl	8007fc0 <_printf_i>
 8007ecc:	e7eb      	b.n	8007ea6 <_svfiprintf_r+0x1c2>
 8007ece:	bf00      	nop
 8007ed0:	080086d4 	.word	0x080086d4
 8007ed4:	080086de 	.word	0x080086de
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	08007c2d 	.word	0x08007c2d
 8007ee0:	080086da 	.word	0x080086da

08007ee4 <_printf_common>:
 8007ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	4616      	mov	r6, r2
 8007eea:	4699      	mov	r9, r3
 8007eec:	688a      	ldr	r2, [r1, #8]
 8007eee:	690b      	ldr	r3, [r1, #16]
 8007ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	bfb8      	it	lt
 8007ef8:	4613      	movlt	r3, r2
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f00:	4607      	mov	r7, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	b10a      	cbz	r2, 8007f0a <_printf_common+0x26>
 8007f06:	3301      	adds	r3, #1
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	0699      	lsls	r1, r3, #26
 8007f0e:	bf42      	ittt	mi
 8007f10:	6833      	ldrmi	r3, [r6, #0]
 8007f12:	3302      	addmi	r3, #2
 8007f14:	6033      	strmi	r3, [r6, #0]
 8007f16:	6825      	ldr	r5, [r4, #0]
 8007f18:	f015 0506 	ands.w	r5, r5, #6
 8007f1c:	d106      	bne.n	8007f2c <_printf_common+0x48>
 8007f1e:	f104 0a19 	add.w	sl, r4, #25
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	6832      	ldr	r2, [r6, #0]
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dc26      	bgt.n	8007f7a <_printf_common+0x96>
 8007f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f30:	1e13      	subs	r3, r2, #0
 8007f32:	6822      	ldr	r2, [r4, #0]
 8007f34:	bf18      	it	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	0692      	lsls	r2, r2, #26
 8007f3a:	d42b      	bmi.n	8007f94 <_printf_common+0xb0>
 8007f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f40:	4649      	mov	r1, r9
 8007f42:	4638      	mov	r0, r7
 8007f44:	47c0      	blx	r8
 8007f46:	3001      	adds	r0, #1
 8007f48:	d01e      	beq.n	8007f88 <_printf_common+0xa4>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	68e5      	ldr	r5, [r4, #12]
 8007f4e:	6832      	ldr	r2, [r6, #0]
 8007f50:	f003 0306 	and.w	r3, r3, #6
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	bf08      	it	eq
 8007f58:	1aad      	subeq	r5, r5, r2
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	6922      	ldr	r2, [r4, #16]
 8007f5e:	bf0c      	ite	eq
 8007f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f64:	2500      	movne	r5, #0
 8007f66:	4293      	cmp	r3, r2
 8007f68:	bfc4      	itt	gt
 8007f6a:	1a9b      	subgt	r3, r3, r2
 8007f6c:	18ed      	addgt	r5, r5, r3
 8007f6e:	2600      	movs	r6, #0
 8007f70:	341a      	adds	r4, #26
 8007f72:	42b5      	cmp	r5, r6
 8007f74:	d11a      	bne.n	8007fac <_printf_common+0xc8>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e008      	b.n	8007f8c <_printf_common+0xa8>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4638      	mov	r0, r7
 8007f82:	47c0      	blx	r8
 8007f84:	3001      	adds	r0, #1
 8007f86:	d103      	bne.n	8007f90 <_printf_common+0xac>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f90:	3501      	adds	r5, #1
 8007f92:	e7c6      	b.n	8007f22 <_printf_common+0x3e>
 8007f94:	18e1      	adds	r1, r4, r3
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	2030      	movs	r0, #48	; 0x30
 8007f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f9e:	4422      	add	r2, r4
 8007fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fa8:	3302      	adds	r3, #2
 8007faa:	e7c7      	b.n	8007f3c <_printf_common+0x58>
 8007fac:	2301      	movs	r3, #1
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	47c0      	blx	r8
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d0e6      	beq.n	8007f88 <_printf_common+0xa4>
 8007fba:	3601      	adds	r6, #1
 8007fbc:	e7d9      	b.n	8007f72 <_printf_common+0x8e>
	...

08007fc0 <_printf_i>:
 8007fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	4691      	mov	r9, r2
 8007fc8:	7e27      	ldrb	r7, [r4, #24]
 8007fca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fcc:	2f78      	cmp	r7, #120	; 0x78
 8007fce:	4680      	mov	r8, r0
 8007fd0:	469a      	mov	sl, r3
 8007fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd6:	d807      	bhi.n	8007fe8 <_printf_i+0x28>
 8007fd8:	2f62      	cmp	r7, #98	; 0x62
 8007fda:	d80a      	bhi.n	8007ff2 <_printf_i+0x32>
 8007fdc:	2f00      	cmp	r7, #0
 8007fde:	f000 80d8 	beq.w	8008192 <_printf_i+0x1d2>
 8007fe2:	2f58      	cmp	r7, #88	; 0x58
 8007fe4:	f000 80a3 	beq.w	800812e <_printf_i+0x16e>
 8007fe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ff0:	e03a      	b.n	8008068 <_printf_i+0xa8>
 8007ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ff6:	2b15      	cmp	r3, #21
 8007ff8:	d8f6      	bhi.n	8007fe8 <_printf_i+0x28>
 8007ffa:	a001      	add	r0, pc, #4	; (adr r0, 8008000 <_printf_i+0x40>)
 8007ffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008000:	08008059 	.word	0x08008059
 8008004:	0800806d 	.word	0x0800806d
 8008008:	08007fe9 	.word	0x08007fe9
 800800c:	08007fe9 	.word	0x08007fe9
 8008010:	08007fe9 	.word	0x08007fe9
 8008014:	08007fe9 	.word	0x08007fe9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fe9 	.word	0x08007fe9
 8008020:	08007fe9 	.word	0x08007fe9
 8008024:	08007fe9 	.word	0x08007fe9
 8008028:	08007fe9 	.word	0x08007fe9
 800802c:	08008179 	.word	0x08008179
 8008030:	0800809d 	.word	0x0800809d
 8008034:	0800815b 	.word	0x0800815b
 8008038:	08007fe9 	.word	0x08007fe9
 800803c:	08007fe9 	.word	0x08007fe9
 8008040:	0800819b 	.word	0x0800819b
 8008044:	08007fe9 	.word	0x08007fe9
 8008048:	0800809d 	.word	0x0800809d
 800804c:	08007fe9 	.word	0x08007fe9
 8008050:	08007fe9 	.word	0x08007fe9
 8008054:	08008163 	.word	0x08008163
 8008058:	680b      	ldr	r3, [r1, #0]
 800805a:	1d1a      	adds	r2, r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	600a      	str	r2, [r1, #0]
 8008060:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008068:	2301      	movs	r3, #1
 800806a:	e0a3      	b.n	80081b4 <_printf_i+0x1f4>
 800806c:	6825      	ldr	r5, [r4, #0]
 800806e:	6808      	ldr	r0, [r1, #0]
 8008070:	062e      	lsls	r6, r5, #24
 8008072:	f100 0304 	add.w	r3, r0, #4
 8008076:	d50a      	bpl.n	800808e <_printf_i+0xce>
 8008078:	6805      	ldr	r5, [r0, #0]
 800807a:	600b      	str	r3, [r1, #0]
 800807c:	2d00      	cmp	r5, #0
 800807e:	da03      	bge.n	8008088 <_printf_i+0xc8>
 8008080:	232d      	movs	r3, #45	; 0x2d
 8008082:	426d      	negs	r5, r5
 8008084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008088:	485e      	ldr	r0, [pc, #376]	; (8008204 <_printf_i+0x244>)
 800808a:	230a      	movs	r3, #10
 800808c:	e019      	b.n	80080c2 <_printf_i+0x102>
 800808e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008092:	6805      	ldr	r5, [r0, #0]
 8008094:	600b      	str	r3, [r1, #0]
 8008096:	bf18      	it	ne
 8008098:	b22d      	sxthne	r5, r5
 800809a:	e7ef      	b.n	800807c <_printf_i+0xbc>
 800809c:	680b      	ldr	r3, [r1, #0]
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	1d18      	adds	r0, r3, #4
 80080a2:	6008      	str	r0, [r1, #0]
 80080a4:	0628      	lsls	r0, r5, #24
 80080a6:	d501      	bpl.n	80080ac <_printf_i+0xec>
 80080a8:	681d      	ldr	r5, [r3, #0]
 80080aa:	e002      	b.n	80080b2 <_printf_i+0xf2>
 80080ac:	0669      	lsls	r1, r5, #25
 80080ae:	d5fb      	bpl.n	80080a8 <_printf_i+0xe8>
 80080b0:	881d      	ldrh	r5, [r3, #0]
 80080b2:	4854      	ldr	r0, [pc, #336]	; (8008204 <_printf_i+0x244>)
 80080b4:	2f6f      	cmp	r7, #111	; 0x6f
 80080b6:	bf0c      	ite	eq
 80080b8:	2308      	moveq	r3, #8
 80080ba:	230a      	movne	r3, #10
 80080bc:	2100      	movs	r1, #0
 80080be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080c2:	6866      	ldr	r6, [r4, #4]
 80080c4:	60a6      	str	r6, [r4, #8]
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	bfa2      	ittt	ge
 80080ca:	6821      	ldrge	r1, [r4, #0]
 80080cc:	f021 0104 	bicge.w	r1, r1, #4
 80080d0:	6021      	strge	r1, [r4, #0]
 80080d2:	b90d      	cbnz	r5, 80080d8 <_printf_i+0x118>
 80080d4:	2e00      	cmp	r6, #0
 80080d6:	d04d      	beq.n	8008174 <_printf_i+0x1b4>
 80080d8:	4616      	mov	r6, r2
 80080da:	fbb5 f1f3 	udiv	r1, r5, r3
 80080de:	fb03 5711 	mls	r7, r3, r1, r5
 80080e2:	5dc7      	ldrb	r7, [r0, r7]
 80080e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080e8:	462f      	mov	r7, r5
 80080ea:	42bb      	cmp	r3, r7
 80080ec:	460d      	mov	r5, r1
 80080ee:	d9f4      	bls.n	80080da <_printf_i+0x11a>
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d10b      	bne.n	800810c <_printf_i+0x14c>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	07df      	lsls	r7, r3, #31
 80080f8:	d508      	bpl.n	800810c <_printf_i+0x14c>
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	6861      	ldr	r1, [r4, #4]
 80080fe:	4299      	cmp	r1, r3
 8008100:	bfde      	ittt	le
 8008102:	2330      	movle	r3, #48	; 0x30
 8008104:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008108:	f106 36ff 	addle.w	r6, r6, #4294967295
 800810c:	1b92      	subs	r2, r2, r6
 800810e:	6122      	str	r2, [r4, #16]
 8008110:	f8cd a000 	str.w	sl, [sp]
 8008114:	464b      	mov	r3, r9
 8008116:	aa03      	add	r2, sp, #12
 8008118:	4621      	mov	r1, r4
 800811a:	4640      	mov	r0, r8
 800811c:	f7ff fee2 	bl	8007ee4 <_printf_common>
 8008120:	3001      	adds	r0, #1
 8008122:	d14c      	bne.n	80081be <_printf_i+0x1fe>
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	b004      	add	sp, #16
 800812a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812e:	4835      	ldr	r0, [pc, #212]	; (8008204 <_printf_i+0x244>)
 8008130:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	680e      	ldr	r6, [r1, #0]
 8008138:	061f      	lsls	r7, r3, #24
 800813a:	f856 5b04 	ldr.w	r5, [r6], #4
 800813e:	600e      	str	r6, [r1, #0]
 8008140:	d514      	bpl.n	800816c <_printf_i+0x1ac>
 8008142:	07d9      	lsls	r1, r3, #31
 8008144:	bf44      	itt	mi
 8008146:	f043 0320 	orrmi.w	r3, r3, #32
 800814a:	6023      	strmi	r3, [r4, #0]
 800814c:	b91d      	cbnz	r5, 8008156 <_printf_i+0x196>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	f023 0320 	bic.w	r3, r3, #32
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	2310      	movs	r3, #16
 8008158:	e7b0      	b.n	80080bc <_printf_i+0xfc>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f043 0320 	orr.w	r3, r3, #32
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	2378      	movs	r3, #120	; 0x78
 8008164:	4828      	ldr	r0, [pc, #160]	; (8008208 <_printf_i+0x248>)
 8008166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800816a:	e7e3      	b.n	8008134 <_printf_i+0x174>
 800816c:	065e      	lsls	r6, r3, #25
 800816e:	bf48      	it	mi
 8008170:	b2ad      	uxthmi	r5, r5
 8008172:	e7e6      	b.n	8008142 <_printf_i+0x182>
 8008174:	4616      	mov	r6, r2
 8008176:	e7bb      	b.n	80080f0 <_printf_i+0x130>
 8008178:	680b      	ldr	r3, [r1, #0]
 800817a:	6826      	ldr	r6, [r4, #0]
 800817c:	6960      	ldr	r0, [r4, #20]
 800817e:	1d1d      	adds	r5, r3, #4
 8008180:	600d      	str	r5, [r1, #0]
 8008182:	0635      	lsls	r5, r6, #24
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	d501      	bpl.n	800818c <_printf_i+0x1cc>
 8008188:	6018      	str	r0, [r3, #0]
 800818a:	e002      	b.n	8008192 <_printf_i+0x1d2>
 800818c:	0671      	lsls	r1, r6, #25
 800818e:	d5fb      	bpl.n	8008188 <_printf_i+0x1c8>
 8008190:	8018      	strh	r0, [r3, #0]
 8008192:	2300      	movs	r3, #0
 8008194:	6123      	str	r3, [r4, #16]
 8008196:	4616      	mov	r6, r2
 8008198:	e7ba      	b.n	8008110 <_printf_i+0x150>
 800819a:	680b      	ldr	r3, [r1, #0]
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	600a      	str	r2, [r1, #0]
 80081a0:	681e      	ldr	r6, [r3, #0]
 80081a2:	6862      	ldr	r2, [r4, #4]
 80081a4:	2100      	movs	r1, #0
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7f8 f81a 	bl	80001e0 <memchr>
 80081ac:	b108      	cbz	r0, 80081b2 <_printf_i+0x1f2>
 80081ae:	1b80      	subs	r0, r0, r6
 80081b0:	6060      	str	r0, [r4, #4]
 80081b2:	6863      	ldr	r3, [r4, #4]
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	2300      	movs	r3, #0
 80081b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081bc:	e7a8      	b.n	8008110 <_printf_i+0x150>
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	4632      	mov	r2, r6
 80081c2:	4649      	mov	r1, r9
 80081c4:	4640      	mov	r0, r8
 80081c6:	47d0      	blx	sl
 80081c8:	3001      	adds	r0, #1
 80081ca:	d0ab      	beq.n	8008124 <_printf_i+0x164>
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	079b      	lsls	r3, r3, #30
 80081d0:	d413      	bmi.n	80081fa <_printf_i+0x23a>
 80081d2:	68e0      	ldr	r0, [r4, #12]
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	4298      	cmp	r0, r3
 80081d8:	bfb8      	it	lt
 80081da:	4618      	movlt	r0, r3
 80081dc:	e7a4      	b.n	8008128 <_printf_i+0x168>
 80081de:	2301      	movs	r3, #1
 80081e0:	4632      	mov	r2, r6
 80081e2:	4649      	mov	r1, r9
 80081e4:	4640      	mov	r0, r8
 80081e6:	47d0      	blx	sl
 80081e8:	3001      	adds	r0, #1
 80081ea:	d09b      	beq.n	8008124 <_printf_i+0x164>
 80081ec:	3501      	adds	r5, #1
 80081ee:	68e3      	ldr	r3, [r4, #12]
 80081f0:	9903      	ldr	r1, [sp, #12]
 80081f2:	1a5b      	subs	r3, r3, r1
 80081f4:	42ab      	cmp	r3, r5
 80081f6:	dcf2      	bgt.n	80081de <_printf_i+0x21e>
 80081f8:	e7eb      	b.n	80081d2 <_printf_i+0x212>
 80081fa:	2500      	movs	r5, #0
 80081fc:	f104 0619 	add.w	r6, r4, #25
 8008200:	e7f5      	b.n	80081ee <_printf_i+0x22e>
 8008202:	bf00      	nop
 8008204:	080086e5 	.word	0x080086e5
 8008208:	080086f6 	.word	0x080086f6

0800820c <memmove>:
 800820c:	4288      	cmp	r0, r1
 800820e:	b510      	push	{r4, lr}
 8008210:	eb01 0402 	add.w	r4, r1, r2
 8008214:	d902      	bls.n	800821c <memmove+0x10>
 8008216:	4284      	cmp	r4, r0
 8008218:	4623      	mov	r3, r4
 800821a:	d807      	bhi.n	800822c <memmove+0x20>
 800821c:	1e43      	subs	r3, r0, #1
 800821e:	42a1      	cmp	r1, r4
 8008220:	d008      	beq.n	8008234 <memmove+0x28>
 8008222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800822a:	e7f8      	b.n	800821e <memmove+0x12>
 800822c:	4402      	add	r2, r0
 800822e:	4601      	mov	r1, r0
 8008230:	428a      	cmp	r2, r1
 8008232:	d100      	bne.n	8008236 <memmove+0x2a>
 8008234:	bd10      	pop	{r4, pc}
 8008236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800823a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800823e:	e7f7      	b.n	8008230 <memmove+0x24>

08008240 <_realloc_r>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	4607      	mov	r7, r0
 8008244:	4614      	mov	r4, r2
 8008246:	460e      	mov	r6, r1
 8008248:	b921      	cbnz	r1, 8008254 <_realloc_r+0x14>
 800824a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800824e:	4611      	mov	r1, r2
 8008250:	f7ff bbec 	b.w	8007a2c <_malloc_r>
 8008254:	b922      	cbnz	r2, 8008260 <_realloc_r+0x20>
 8008256:	f7ff fb99 	bl	800798c <_free_r>
 800825a:	4625      	mov	r5, r4
 800825c:	4628      	mov	r0, r5
 800825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008260:	f000 f814 	bl	800828c <_malloc_usable_size_r>
 8008264:	42a0      	cmp	r0, r4
 8008266:	d20f      	bcs.n	8008288 <_realloc_r+0x48>
 8008268:	4621      	mov	r1, r4
 800826a:	4638      	mov	r0, r7
 800826c:	f7ff fbde 	bl	8007a2c <_malloc_r>
 8008270:	4605      	mov	r5, r0
 8008272:	2800      	cmp	r0, #0
 8008274:	d0f2      	beq.n	800825c <_realloc_r+0x1c>
 8008276:	4631      	mov	r1, r6
 8008278:	4622      	mov	r2, r4
 800827a:	f7ff fb71 	bl	8007960 <memcpy>
 800827e:	4631      	mov	r1, r6
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff fb83 	bl	800798c <_free_r>
 8008286:	e7e9      	b.n	800825c <_realloc_r+0x1c>
 8008288:	4635      	mov	r5, r6
 800828a:	e7e7      	b.n	800825c <_realloc_r+0x1c>

0800828c <_malloc_usable_size_r>:
 800828c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008290:	1f18      	subs	r0, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	bfbc      	itt	lt
 8008296:	580b      	ldrlt	r3, [r1, r0]
 8008298:	18c0      	addlt	r0, r0, r3
 800829a:	4770      	bx	lr

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
